---
title: "TruckerWeather"

bibliography: bibliography/references.bib

citation: true
citation-location: margin
citations-hover: true

code-copy: true
code-fold: true
code-link: true
code-overflow: wrap
code-tools: true

fig-responsive: true

lightbox: true
---

```{r}
#| label: rLibraries
#| echo: false
#| warning: false
#| message: false
library(DBI)
library(dbplyr)
library(dplyr)
library(duckdb)
library(gt)
library(purrr)
library(paletteer)
library(reticulate)
library(tibble)
library(ggplot2)
```

```{python}
#| label: pythonImports
#| echo: false
#| warning: false
#| message: false
import pandas as pd
import openmeteo_requests
import requests_cache
from retry_requests import retry
```

# Visualize Weather Data

## Database Connections

### MSSQL

```{r}
#| code-summary: "What you would execute in your terminal if on Ubuntu to get the odbc drivers for mssql connections."
#| file: "scripts/Bash/mssql_odbc_driver.sh"
#| eval: false
```

```{r}
library(DBI)
library(odbc)

# Set up the connection
mssql_con <- dbConnect(
  odbc::odbc(),
  Driver = "ODBC Driver 18 for SQL Server", # Ensure this driver is installed
  Server = "localhost,1433",               # Server address and port
  Database = "TestDB",                     # Database name
  UID = "sa",                              # Username
  PWD = "MyStr@ngPassw0rd11",              # Password
  TrustServerCertificate = "yes"           # Optional: For self-signed certificates
)

# Test the connection
#dbListTables(con)  # List tables in the database to verify the connection
```

### DuckDB Connection

```{r}
#| label: duckDBconnected
duckdb_con <- dbConnect(duckdb::duckdb(
     config = list(max_memory = '24GB')), ":memory:")
```

### Test SQL Server to DuckDB Pipeline

From sql file

```{r}
     
sql <- readLines("scripts/SQL/msTest.sql")

# Execute the SQL commands
dbExecute(mssql_con, paste(sql, collapse = "\n"))

result <- dplyr::tbl(mssql_con, I("dbo.inventory"))
print(result)
```

Or from sql code chunk

```{sql}
#| connection: mssql_con
USE TestDB;

CREATE TABLE dbo.Inventory2
(id INT,
name NVARCHAR (50),
quantity INT,
PRIMARY KEY (id));

INSERT INTO dbo.Inventory2
VALUES (1, 'banana', 150);

INSERT INTO dbo.Inventory2
VALUES (2, 'orange', 154);
```

Lazy query on mssql database table

```{r}
#| label: lazyMssql
dplyr::tbl(mssql_con, I("dbo.Inventory"))
```

Register mssql table with duckdb

```{r}
#| label: regMssql2Ddb
dplyr::tbl(mssql_con, I("dbo.Inventory")) |>
     duckdb_register(conn = duckdb_con, name = I("dbo.Inventory"))
```

return duckcdb registered mssql table as dataframe output

```{r}
#| label: dfOutRegMssqlDdb
result <- dbGetQuery(duckdb_con, "SELECT * FROM 'dbo.Inventory';")
print(result)
```

```{r}
#| label: normalCalcs
result |>
     summarize(q_sum = sum(quantity))
```

or lazy query registered mssql table with duckdb

```{r}
#| label: regMssql2Ddb
dplyr::tbl(duckdb_con, I("'dbo.Inventory'"))
```

do some lazy calculations

```{r}
#| label: lazyCalculations
dplyr::tbl(duckdb_con, I("'dbo.Inventory'")) |>
     summarize(
     q_sum = sum(quantity), 
     q_avg = mean(quantity)
     )
```

## Custom Output Tools

### Tables

::: code-fold-flex
```{r}
#| label: "loadTableOutput"
#| code-summary: "Table formatting code."
#| file: "scripts/R/table_output.R"
```
:::

#### Plots

::: code-fold-flex
```{r}
#| label: "loadPlotOutput"
#| code-summary: "Plot theming code."
#| file: "scripts/R/plot_output.R"
```
:::

## Weather Data API Connection

[@openMeteo_2025]

The coordinates used in example are currently from:

> Dwight D. Eisenhower Hwy, aka, the intersection of Hwy 70 & 270

#### Hourly

```{python}
#| label: sourceHourlyAPI
#| file: "scripts/Python/hourly_api.py"
```

```{python}
hourly_api()
```

```{python}
#| label: sourceDailyAPI
#| file: "scripts/Python/daily_api.py"
```

```{python}
daily_api()
```

## Weather API data to DuckDB Test

```{r}
#| label: quickConvert
hourly_dataframe_r <- py$hourly_dataframe
duckdb_register(duckdb_con, "hourly", hourly_dataframe_r)
```

```{sql}
#| connection: duckdb_con
CREATE OR REPLACE TABLE hourly_table AS SELECT * FROM hourly;
```

```{sql}
#| label: quickSqlChunkOutput
#| connection: duckdb_con
SELECT * FROM hourly_table;
```

```{r}
#| label: quickLazyQuery
dplyr::tbl(duckdb_con, "hourly_table")
```

## Disconnect From Databases

```{r}
dbDisconnect(mssql_con)
dbDisconnect(duckdb_con)
```
