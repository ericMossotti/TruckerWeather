---
title: "TruckerWeather"

bibliography: bibliography/references.bib

citation: true
citation-location: margin
citations-hover: true

code-copy: true
code-fold: true
code-link: true
code-overflow: wrap
code-tools: true

fig-responsive: true

lightbox: true
---

```{r}
#| label: rLibraries
#| echo: false
#| warning: false
#| message: false
library(DBI)
library(dbplyr)
library(dplyr)
library(duckdb)
library(gt)
library(purrr)
library(paletteer)
library(reticulate)
library(tibble)
library(ggplot2)
```

```{python}
#| label: pythonImports
#| echo: false
#| warning: false
#| message: false
import pandas as pd
import openmeteo_requests
import requests_cache
from retry_requests import retry
```

# Visualize Weather Data

## Database Connections

### MSSQL

```{r}
#| code-summary: "What you would execute in your terminal if on Ubuntu to get the odbc drivers for mssql connections."
#| file: "scripts/Bash/mssql_odbc_driver.sh"
#| eval: false
```


```{r}
library(DBI)
library(odbc)

# Set up the connection
mssql_con <- dbConnect(
  odbc::odbc(),
  Driver = "ODBC Driver 18 for SQL Server", # Ensure this driver is installed
  Server = "localhost,1433",               # Server address and port
  Database = "TestDB",                     # Database name
  UID = "sa",                              # Username
  PWD = "MyStr@ngPassw0rd11",              # Password
  TrustServerCertificate = "yes"           # Optional: For self-signed certificates
)

# Test the connection
#dbListTables(con)  # List tables in the database to verify the connection
```


### DuckDB Connection

```{r}
#| label: duckDBconnected
duckdb_con <- dbConnect(duckdb::duckdb(
     config = list(max_memory = '24GB')), ":memory:")
```


### Test SQL Server to DuckDB Pipeline

From sql file

```{r}
     
sql <- readLines("scripts/SQL/msTest.sql")

# Execute the SQL commands
dbExecute(mssql_con, paste(sql, collapse = "\n"))

result <- dplyr::tbl(mssql_con, I("dbo.inventory"))
print(result)
```

Or from sql code chunk

```{sql}
#| connection: mssql_con
USE TestDB;

CREATE TABLE dbo.Inventory2
(id INT,
name NVARCHAR (50),
quantity INT,
PRIMARY KEY (id));

INSERT INTO dbo.Inventory2
VALUES (1, 'banana', 150);

INSERT INTO dbo.Inventory2
VALUES (2, 'orange', 154);
```

Lazy query on mssql database table

```{r}

dplyr::tbl(mssql_con, I("dbo.Inventory"))
```

Register mssql table with duckdb

```{r}
dplyr::tbl(mssql_con, I("dbo.Inventory")) |>
     duckdb_register(conn = duckdb_con, name = I("dbo.Inventory"))
```

return duckcdb registered mssql table as dataframe output

```{r}
result <- dbGetQuery(duckdb_con, "SELECT * FROM 'dbo.Inventory';")
print(result)
```

```{r}
result |>
     summarize(q_sum = sum(quantity))

```


or lazy query registered mssql table with duckdb

```{r}
dplyr::tbl(duckdb_con, I("'dbo.Inventory'"))
```

do some lazy calculations

```{r}
dplyr::tbl(duckdb_con, I("'dbo.Inventory'")) |>
     summarize(
     q_sum = sum(quantity), 
     q_avg = mean(quantity)
     )

```


## Custom Output Tools

### Tables

::: code-fold-flex
```{r}
#| label: "loadTableOutput"
#| code-summary: "Table formatting code."
#| file: "scripts/R/table_output.R"
```
:::

#### Plots

::: code-fold-flex
```{r}
#| label: "loadPlotOutput"
#| code-summary: "Plot theming code."
#| file: "scripts/R/plot_output.R"
```
:::

## Weather Data API Connection

[@openMeteo_2025]

Dwight D. Eisenhower Hwy, aka, the intersection of Hwy 70 & 270

#### Daily

```{python}
#| label: weatherApi_Daily

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after = 3600)
retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
openmeteo = openmeteo_requests.Client(session = retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://api.open-meteo.com/v1/forecast"
params = {
	"latitude": 38.748,
	"longitude": -90.439,
	"daily": 
	     ["weather_code", 
	     "daylight_duration", 
	     "precipitation_sum", 
	     "rain_sum", 
	     "showers_sum", 
	     "snowfall_sum", 
	     "precipitation_hours", 
	     "precipitation_probability_max", 
	     "wind_speed_10m_max", 
	     "wind_gusts_10m_max", 
	     "wind_direction_10m_dominant"],
	"temperature_unit": "fahrenheit",
	"wind_speed_unit": "mph",
	"precipitation_unit": "inch",
	"timezone": "America/Chicago",
	"models": "best_match"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}째N {response.Longitude()}째E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process daily data. The order of variables needs to be the same as requested.
daily = response.Daily()
daily_weather_code = daily.Variables(0).ValuesAsNumpy()
daily_daylight_duration = daily.Variables(1).ValuesAsNumpy()
daily_precipitation_sum = daily.Variables(2).ValuesAsNumpy()
daily_rain_sum = daily.Variables(3).ValuesAsNumpy()
daily_showers_sum = daily.Variables(4).ValuesAsNumpy()
daily_snowfall_sum = daily.Variables(5).ValuesAsNumpy()
daily_precipitation_hours = daily.Variables(6).ValuesAsNumpy()
daily_precipitation_probability_max = daily.Variables(7).ValuesAsNumpy()
daily_wind_speed_10m_max = daily.Variables(8).ValuesAsNumpy()
daily_wind_gusts_10m_max = daily.Variables(9).ValuesAsNumpy()
daily_wind_direction_10m_dominant = daily.Variables(10).ValuesAsNumpy()

daily_data = {"date": pd.date_range(
	start = pd.to_datetime(daily.Time(), unit = "s", utc = True),
	end = pd.to_datetime(daily.TimeEnd(), unit = "s", utc = True),
	freq = pd.Timedelta(seconds = daily.Interval()),
	inclusive = "left"
)}

daily_data["weather_code"] = daily_weather_code
daily_data["daylight_duration"] = daily_daylight_duration
daily_data["precipitation_sum"] = daily_precipitation_sum
daily_data["rain_sum"] = daily_rain_sum
daily_data["showers_sum"] = daily_showers_sum
daily_data["snowfall_sum"] = daily_snowfall_sum
daily_data["precipitation_hours"] = daily_precipitation_hours
daily_data["precipitation_probability_max"] = daily_precipitation_probability_max
daily_data["wind_speed_10m_max"] = daily_wind_speed_10m_max
daily_data["wind_gusts_10m_max"] = daily_wind_gusts_10m_max
daily_data["wind_direction_10m_dominant"] = daily_wind_direction_10m_dominant

daily_dataframe = pd.DataFrame(data = daily_data)
print(daily_dataframe)

```

#### Hourly

```{python}

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after = 3600)
retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
openmeteo = openmeteo_requests.Client(session = retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://api.open-meteo.com/v1/forecast"
params = {
	"latitude": 38.748,
	"longitude": -90.439,
	"hourly": 
	     ["temperature_2m", 
	     "precipitation_probability", 
	     "precipitation", 
	     "rain", 
	     "showers", 
	     "snowfall", 
	     "snow_depth", 
	     "weather_code", 
	     "visibility", 
	     "wind_speed_10m", 
	     "wind_direction_10m"],
	"temperature_unit": "fahrenheit",
	"wind_speed_unit": "mph",
	"precipitation_unit": "inch",
	"timezone": "America/Chicago",
	"models": "best_match"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}째N {response.Longitude()}째E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()
hourly_precipitation_probability = hourly.Variables(1).ValuesAsNumpy()
hourly_precipitation = hourly.Variables(2).ValuesAsNumpy()
hourly_rain = hourly.Variables(3).ValuesAsNumpy()
hourly_showers = hourly.Variables(4).ValuesAsNumpy()
hourly_snowfall = hourly.Variables(5).ValuesAsNumpy()
hourly_snow_depth = hourly.Variables(6).ValuesAsNumpy()
hourly_weather_code = hourly.Variables(7).ValuesAsNumpy()
hourly_visibility = hourly.Variables(8).ValuesAsNumpy()
hourly_wind_speed_10m = hourly.Variables(9).ValuesAsNumpy()
hourly_wind_direction_10m = hourly.Variables(10).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
	start = pd.to_datetime(hourly.Time(), unit = "s", utc = True),
	end = pd.to_datetime(hourly.TimeEnd(), unit = "s", utc = True),
	freq = pd.Timedelta(seconds = hourly.Interval()),
	inclusive = "left"
)}

hourly_data["temperature_2m"] = hourly_temperature_2m
hourly_data["precipitation_probability"] = hourly_precipitation_probability
hourly_data["precipitation"] = hourly_precipitation
hourly_data["rain"] = hourly_rain
hourly_data["showers"] = hourly_showers
hourly_data["snowfall"] = hourly_snowfall
hourly_data["snow_depth"] = hourly_snow_depth
hourly_data["weather_code"] = hourly_weather_code
hourly_data["visibility"] = hourly_visibility
hourly_data["wind_speed_10m"] = hourly_wind_speed_10m
hourly_data["wind_direction_10m"] = hourly_wind_direction_10m

hourly_dataframe = pd.DataFrame(data = hourly_data)
print(hourly_dataframe)

```

```{r}
#| label: quickConvert
hourly_dataframe_r <- py$hourly_dataframe
duckdb_register(duckdb_con, "hourly", hourly_dataframe_r)
```

```{sql}
#| connection: duckdb_con
CREATE OR REPLACE TABLE hourly_table AS SELECT * FROM hourly;
```


```{sql}
#| label: quickSqlChunkOutput
#| connection: duckdb_con
SELECT * FROM hourly_table;
```


```{r}
#| label: quickLazyQuery
dplyr::tbl(duckdb_con, "hourly_table")
```

## Disconnect

```{r}
dbDisconnect(mssql_con)
dbDisconnect(duckdb_con)
```

