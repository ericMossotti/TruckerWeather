---
title: "Weather Assistant"

bibliography: bibliography/references.bib

citation: false
citation-location: margin
citations-hover: true

code-copy: true
code-fold: true
code-link: true
code-overflow: wrap
code-tools: true

fig-responsive: true

lightbox: true

source: true
---

```{r}
#| label: rLibraries
#| echo: false
#| warning: false
#| message: false

library(arrow)
library(DBI)
library(dbplyr)
library(dplyr)
library(duckdb)
library(forcats)
library(ggplot2)
library(gt)
library(lubridate)
library(odbc)
library(openair)
#library(pillar)
library(pryr)
library(purrr)
library(paletteer)
#library(plotly)
#library(plumber)
library(polars)
library(png)
#library(profvis)
library(readr)
library(reticulate)
library(scales)
library(tibble)
library(tidyr)
```

```{python}
#| label: pythonImports
#| echo: false
#| warning: false
#| message: false
import duckdb
import openmeteo_requests
import pandas as pd
import polars as pl
import requests_cache
from retry_requests import retry
```

## Purpose

Can brokers involved with bids for shipping contracts via road be better informed with data pertaining to the weather and other factors deemed relevant to the bid price?

## Broker Bid Contract Pricing

### Possible Influencing Factors

1.  Weather related factors

2.  Road topology

3.  Truck's attributes

4.  Gas prices

5.  Traffic

    -   Accidents

    -   Local events

6.  Season of year

    -   holidays

7.  Day of week

8.  Time of day

## Database Connections

#### MSSQL

```{r}
#| include: false
#| eval: false
#| echo: false
#| code-summary: "Optional: One would execute something like this in their bash terminal if on Ubuntu to get the odbc drivers for mssql connections."
##| file: "practice/Bash/mssql_odbc_driver.sh"
```

::: code-fold-flex
```{r}
#| label: "mssqlconnect"
#| code-summary: "Currently optional: Connects to a dockerized mssql database."
#| eval: false
#| echo: true

# Set up the connection
mssql_con <- dbConnect(
  odbc::odbc(),
  driver = "ODBC Driver 18 for SQL Server", 
  server = "localhost,1433",               
  database = "TestDB",                    
  uid = "sa",                             
  pwd = "MyStr@ngPassw0rd11",             
  TrustServerCertificate = "yes"
)
```
:::

#### DuckDB

::: code-fold-flex
```{r}
#| label: "duckDBconnected"
#| code-summary: "Establish a DuckDB, embedded database connection."
duckdb_con <- dbConnect(duckdb::duckdb(
     config = list(max_memory = '24GB')), ":memory:")
```
:::

## Loading Custom Output Scripts

### Tables

::: code-fold-flex
```{r}
#| label: "loadTableOutput"
#| code-summary: "table building"
#| file: "scripts/Output/Tables/table_workshop.R"
```
:::

::: code-fold-flex
```{r}
#| label: "loadTableOutput"
#| code-summary: "table styling"
#| file: "scripts/Output/Tables/table_styling.R"
```
:::

### Plots

::: code-fold-flex
```{r}
#| label: "loadPlotOutput"
#| code-summary: "plot theming"
#| file: "scripts/Output/Plots/plot_themer.R"
```
:::

::: code-fold-flex
```{r}
#| label: "loadPlotWorkshop"
#| code-summary: "plot building"
#| file: "scripts/Output/Plots/plot_workshop.R"
```
:::

# Import

## Weather Data API

[@openMeteo_2025]

### 24-Hour Forecast

::: code-fold-flex
```{python}
#| label: loadHourlyAPIscript
#| code-summary: "Run the API script to import the dataset."
#| file: "scripts/Import/API/Hourly/import_api_hourly.py"
```
:::

::: code-fold-flex
```{r}
#| label: writeHourlyForecastAPIdata
#| code-summary: "Write hourly api results."

dbWriteTable(
duckdb_con, 
"forecast_data", 
data.frame(py$import_api_hourly(38.748, -90.439)),
overwrite = TRUE
)
```
:::

### Historical Weather (1974-2024)

::: code-fold-flex
```{python}
#| label: loadHourlyHistoricalAPIscript
#| code-summary: "Run the API script to import the dataset."
#| file: "scripts/Import/API/Hourly/import_api_hourly_historical.py"
```
:::

::: code-fold-flex
```{r}
#| label: writeHistoricalAPIdata
#| code-summary: "Write hourly api historical data."

dbWriteTable(
duckdb_con, 
"historical_data",
data.frame(py$import_api_hourly_historical(38.748, -90.439)),
overwrite = TRUE
)
```
:::


# Weather Factors

::: p-1
The study, published in the *Weather and Forecasting* journal, focuses on evaluating and improving the accuracy of weather prediction models, particularly for severe weather events. It examines the performance of high-resolution numerical weather prediction (NWP) models in forecasting convective storms, which are critical for predicting severe weather such as thunderstorms, hail, and tornadoes. The research highlights advancements in model resolution, data assimilation techniques, and the integration of observational data to enhance forecast precision. The findings emphasize the importance of these improvements for short-term (nowcasting) and medium-range forecasts, particularly in regions prone to severe weather, like the central United States (including Missouri). @dowell_high-resolution_2022
:::

::: code-fold-flex
```{r}
#| label: "forecastModelDescription"
#| code-summary: "table setup"
#| warning: false

# Create the tibble
forecast_models <- tibble(
     Model = c("GFS", "HRRR"),
     Developed_By = c(
          "NOAA (National Oceanic and Atmospheric Administration)",
          "NOAA (specifically by the Earth System Research Laboratory)"
     ),
     Scope = c(
          "Global",
          "Regional (primarily focused on the contiguous United States)"
     ),
     Resolution = c(
          "Lower resolution compared to HRRR (approximately 13 km as of recent updates)",
          "High resolution (3 km)"
     ),
     Forecast_Range = c("Up to 16 days", "Up to 18 hours"),
     Updates = c("Runs four times a day (00Z, 06Z, 12Z, 18Z)", "Runs every hour"),
     Applications = c(
          "Used for long-term weather forecasting, climate modeling, and global weather patterns.",
          "Ideal for short-term, detailed weather forecasting, including severe weather events like thunderstorms, tornadoes, and localized precipitation."
     )
)

locations_list = colnames(forecast_models)

notes_list =  list(
     "",
  "Organization or entity responsible for developing the model.",
  "Geographical coverage of the model (e.g., global or regional).",
  "Spatial resolution of the model, indicating the level of detail in the forecasts.",
  "Time period for which the model provides forecasts.",
  "Frequency at which the model is updated with new data.",
  "Primary uses and strengths of the model in weather forecasting."
  )

footnotes_df <- tibble(
  notes = notes_list, 
  locations = locations_list)

pal_df <- tibble(
  cols = locations_list
#  pals = list(eval_palette("viridis::viridis", 2, 'c', 1))
)

rTable <- r_table_theming(
forecast_models,
title = "Forecast Models: Attributes",
subtitle = NULL,
footnotes_df,
source_note = md("**source**: "),
pal_df,
multiline_feet = TRUE,
table_font_size = pct(85),
target_everything = TRUE,
row_name_col = "Model",
)
```
:::

::::: {#one}
:::: medium-large-tables
::: table-flex
```{r}
#| label: "tbl-modelAttributes"
#| warning: false
#| echo: false
#| column: body-outset-right

rTable |>
opt_css(
css = '
#one .gt_table_body td.gt_row {
box-shadow: -1px -1px 7px 1px rgba(0, 0, 0, 0.2) inset;
} 
'
)
```
:::
::::
:::::

::: code-fold-flex
```{r}
#| label: "modelDiffSetup"
#| code-summary: "table setup"
#| message: false
#| error: false

forecast_model_differences <- tibble(
"Resolution" = c(
"HRRR has a much higher resolution than GFS, making it more accurate for short-term, localized forecasts."
),
"Forecast_Range" = c("GFS provides forecasts for a much longer period compared to HRRR."),
"Update_Frequency" =  c(
"HRRR updates more frequently, which is crucial for capturing rapidly changing weather conditions."
)
)

locations_list = colnames(forecast_model_differences)

notes_list =  list(
  "Spatial resolution of the model, indicating the level of detail in the forecasts.",
  "Time period for which the model provides forecasts.",
  "Frequency at which the model is updated with new data.")

footnotes_df <- tibble(
  notes = notes_list, 
  locations = locations_list)

pal_df <- tibble(
  cols = locations_list
#  pals = list(eval_palette("viridis::viridis", 2, 'c', 1))
)

rTable <- r_table_theming(
forecast_model_differences,
title = "Forecast Models: Differences",
subtitle = NULL,
footnotes_df,
source_note = md("**source**: "),
pal_df,
multiline_feet = TRUE,
table_font_size = pct(85),
target_everything = TRUE,
row_name_col = NULL
)
```
:::

::::: {#two}
:::: medium-large-tables
::: table-flex
```{r}
#| label: "tbl-modelDiffs"
#| echo: false
rTable |>
opt_css(
css = '
#two .gt_table_body td.gt_row {
box-shadow: -1px -1px 7px 1px rgba(0, 0, 0, 0.2) inset;
} 
'
)
```
:::
::::
:::::


## Database Setup

### ENUM

::: code-fold-flex
```{r}
#| label: "setEnumsFile"
#| code-summary: "load enum file"
#| file: "scripts/Setup/Enum/create_enum_and_associate.R"
```
:::

::: code-fold-flex
```{r}
#| label: "setEnums"
#| code-summary: "Sets the custom data types in the database."

codes <- c(
'0',
'1',
'2',
'3',
'45',
'48',
'51',
'53',
'55',
'56',
'57',
'61',
'63',
'65',
'66',
'67',
'71',
'73',
'75',
'77',
'80',
'81',
'82',
'85',
'86',
'95',
'96',
'99'
)

descriptions <- c(
'Clear sky',
'Mainly clear',
'Partly cloudy',
'Overcast',
'Fog',
'Depositing rime fog',
'Drizzle: light',
'Drizzle: moderate',
'Drizzle: dense',
'Freezing drizzle: light',
'Freezing drizzle: dense',
'Rain: slight',
'Rain: moderate',
'Rain: heavy',
'Freezing rain: light',
'Freezing rain: heavy',
'Snow fall: slight',
'Snow fall: moderate',
'Snow fall: heavy',
'Snow grains',
'Rain showers: slight',
'Rain showers: moderate',
'Rain showers: violent',
'Snow showers: slight',
'Snow showers: heavy',
'Thunderstorm: slight or moderate',
'Thunderstorm with slight hail',
'Thunderstorm with heavy hail'
)

create_enum_and_associate(
duckdb_con, 
"weather_code_enum", 
"WeatherCodeDictionary", 
codes, 
descriptions
)

```
:::

::: code-fold-flex
```{r}
#| label: "wcSetup"
#| code-summary: "table setup"

rTable <- tbl(duckdb_con, "WeatherCodeDictionary") |> collect()

locations_list = colnames(rTable)

notes_list =  list(
"World Meteorlogical Organization (WMO) code.", 
"Type of meterological event.")

footnotes_df <- tibble(
  notes = notes_list, 
  locations = locations_list)

pal_df <- tibble(
  cols = locations_list,
  pals = list(eval_palette("basetheme::brutal", 7, 'd', 1))
)

rTable <- r_table_theming(
rTable,
title = "Weather Code: As Data Type",
subtitle = NULL,
footnotes_df,
source_note = md("**source**: World Meteorlogical Organization"),
pal_df,
multiline_feet = TRUE,
table_font_size = pct(85),
target_everything = TRUE,
color_by_columns = "Code",
#row_name_col = "Model"
)

```
:::

[@noaa_wmo_2025]

:::: skinny-tables
::: table-flex
```{r}
#| label: "tbl-wc"
#| echo: false
#| tbl-cap: "How the WMO codes are\n associated to weather events."

rTable
```
:::
::::


# In-Database Transformations



## Custom Data Types

```{sql}
#| connection: duckdb_con

-- Create ENUM for wind direction
CREATE TYPE cardinal_direction_enum AS ENUM (
  'N', 
  'NE', 
  'E', 
  'SE', 
  'S', 
  'SW', 
  'W', 
  'NW'
);

CREATE TYPE month_name_enum AS ENUM (
  'January', 
  'February', 
  'March', 
  'April', 
  'June', 
  'July', 
  'August', 
  'September', 
  'October', 
  'November', 
  'December'
);

CREATE TYPE month_abb_enum AS ENUM (
  'Jan', 
  'Feb', 
  'Mar', 
  'Apr', 
  'Jun', 
  'Jul', 
  'Aug', 
  'Sep', 
  'Oct', 
  'Nov', 
  'Dec'
);

CREATE TYPE weekday_name_enum AS ENUM (
  'Sunday', 
  'Monday', 
  'Tuesday', 
  'Wednesday', 
  'Thursday', 
  'Friday', 
  'Saturday'
);

CREATE TYPE weekday_abb_enum AS ENUM (
  'Sun', 
  'Mon', 
  'Tue', 
  'Wed', 
  'Thu', 
  'Fri', 
  'Sat'
);

CREATE TYPE visibility_cat_enum AS ENUM (
  'Clearest (>30 km)', 
  'Excellent (10-30 km)', 
  'Good (5-10 km)', 
  'Moderate (2-5 km)', 
  'Low (1-2 km)', 
  'Fog/Haze (<1 km)'
  );

```

## Dataset: Forecast, 24-Hour

### CTAS (Create Table As Select) Approach


```{sql}
#| connection: duckdb_con
#| output.var: table_transformed
-- Assess results of data transformation before replacing the table
CREATE OR REPLACE VIEW transformed_forecast AS
SELECT 
     date,
     ROUND(temperature_2m::FLOAT, 1) AS temperature_2m,
     precipitation_probability,
     ROUND(precipitation::FLOAT, 3) AS precipitation,
     ROUND(rain::FLOAT, 3) AS rain,
     ROUND(showers::FLOAT, 3) AS showers,
     ROUND(snowfall::FLOAT, 3) AS snowfall,
     ROUND(snow_depth::FLOAT, 3) AS snow_depth,
     weather_code::INTEGER::TEXT::weather_code_enum AS weather_code,
     ROUND(visibility::FLOAT, 1) AS visibility,
     ROUND(wind_speed_10m::FLOAT, 2) AS wind_speed_10m,
     wind_direction_10m,
     -- Calculate cardinal direction
     CASE 
          WHEN wind_direction_10m BETWEEN 0 AND 22.5 THEN 'N'::cardinal_direction_enum
          WHEN wind_direction_10m BETWEEN 22.5 AND 67.5 THEN 'NE'::cardinal_direction_enum
          WHEN wind_direction_10m BETWEEN 67.5 AND 112.5 THEN 'E'::cardinal_direction_enum
          WHEN wind_direction_10m BETWEEN 112.5 AND 157.5 THEN 'SE'::cardinal_direction_enum
          WHEN wind_direction_10m BETWEEN 157.5 AND 202.5 THEN 'S'::cardinal_direction_enum
          WHEN wind_direction_10m BETWEEN 202.5 AND 247.5 THEN 'SW'::cardinal_direction_enum
          WHEN wind_direction_10m BETWEEN 247.5 AND 292.5 THEN 'W'::cardinal_direction_enum
          WHEN wind_direction_10m BETWEEN 292.5 AND 337.5 THEN 'NW'::cardinal_direction_enum
          WHEN wind_direction_10m BETWEEN 337.5 AND 360 THEN 'N'::cardinal_direction_enum
     END AS wind_direction_cardinal,
     CASE
          WHEN visibility > 30_000 THEN 'Clearest (>30 km)'::visibility_cat_enum
          WHEN visibility > 10_000 THEN 'Excellent (10-30 km)'::visibility_cat_enum
          WHEN visibility > 5_000 THEN 'Good (5-10 km)'::visibility_cat_enum
          WHEN visibility > 2_000 THEN 'Moderate (2-5 km)'::visibility_cat_enum
          WHEN visibility > 1_000 THEN 'Low (1-2 km)'::visibility_cat_enum
          ELSE 'Fog/Haze (<1 km)'::visibility_cat_enum
     END AS visibility_categories,
     -- Extract date parts
     EXTRACT(YEAR FROM date) AS year,
     EXTRACT(MONTH FROM date) AS month,
     monthname(date)::month_name_enum AS month_name,
     strftime(date, '%b')::month_abb_enum AS month_abb,
     EXTRACT(DAY FROM date) AS day,
     dayname(date)::weekday_name_enum AS weekday_name,
     strftime(date, '%a')::weekday_abb_enum AS weekday_abb,
     strftime(date, '%b %d') AS month_day,
     strftime(date, '%H:%M:%S') AS time_only,
     strptime('1970-01-01 ' || strftime(date, '%H:%M:%S'), '%Y-%m-%d %H:%M:%S') AS common_date
FROM forecast_data;

-- Preview results
SELECT * FROM transformed_forecast LIMIT 10;

```



```{sql}
#| connection: duckdb_con
#| output.var: table_forecast

-- Replace the historical weather table
CREATE OR REPLACE TABLE forecast_data AS
SELECT * FROM transformed_forecast;

-- Preview results 
SELECT * FROM forecast_data LIMIT 10;
```



```{sql}
#| connection: duckdb_con
DROP VIEW transformed_forecast;
```

Speed up time-based queries by indexing the timestamp column:

```{sql}
#| connection: duckdb_con
CREATE INDEX idx_forecast_date ON forecast_data(date);
```

Refresh database statistics for the query planner:

```{sql}
#| connection: duckdb_con
ANALYZE forecast_data;
```



## Dataset: Historical, 1974-2024

Ensure the weather_code column uses the ENUM type for efficient storage and queries:

### CTAS Approach

```{sql}
#| connection: duckdb_con
#| output.var: table_tranformation

-- Create ENUM for wind direction
CREATE TYPE cardinal_direction_enum AS ENUM (
  'N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'
);

-- Assess results of data transformation before replacing the table
CREATE OR REPLACE VIEW transformed_historical AS
SELECT 
     date,
     ROUND(temperature_2m::FLOAT, 1) AS temperature_2m,
     ROUND(precipitation::FLOAT, 1) AS precipitation,
     ROUND(rain::FLOAT, 2) AS rain,
     ROUND(snowfall::FLOAT, 2) AS snowfall,
     ROUND(snow_depth::FLOAT, 2) AS snow_depth,
     weather_code::INTEGER::TEXT::weather_code_enum AS weather_code,
     ROUND(wind_speed_10m::FLOAT, 2) AS wind_speed_10m,
     wind_direction_10m,
     -- Calculate cardinal direction
     CASE 
          WHEN wind_direction_10m BETWEEN 337.5 AND 360 THEN 'N'
          WHEN wind_direction_10m BETWEEN 0 AND 22.5 THEN 'N'
          WHEN wind_direction_10m BETWEEN 22.5 AND 67.5 THEN 'NE'
          WHEN wind_direction_10m BETWEEN 67.5 AND 112.5 THEN 'E'
          WHEN wind_direction_10m BETWEEN 112.5 AND 157.5 THEN 'SE'
          WHEN wind_direction_10m BETWEEN 157.5 AND 202.5 THEN 'S'
          WHEN wind_direction_10m BETWEEN 202.5 AND 247.5 THEN 'SW'
          WHEN wind_direction_10m BETWEEN 247.5 AND 292.5 THEN 'W'
          WHEN wind_direction_10m BETWEEN 292.5 AND 337.5 THEN 'NW'
     END AS wind_direction_cardinal,
     -- Extract date parts
     EXTRACT(YEAR FROM date) AS year,
     EXTRACT(MONTH FROM date) AS month,
     EXTRACT(DAY FROM date) AS day
FROM historical_data;

-- Preview results
SELECT * FROM transformed_historical LIMIT 10;
```



```{sql}
#| connection: duckdb_con
#| output.var: table_historical

-- Replace the historical weather table
CREATE OR REPLACE TABLE historical_data AS
SELECT * FROM transformed_historical;

-- Preview results 
SELECT * FROM historical_data LIMIT 10;
```



```{sql}
#| connection: duckdb_con
DROP VIEW transformed_historical;
```

Speed up time-based queries by indexing the timestamp column:

```{sql}
#| connection: duckdb_con
CREATE INDEX idx_historical_date ON historical_data(date);
```

Refresh database statistics for the query planner:

```{sql}
#| connection: duckdb_con
ANALYZE historical_data;
```



```{sql}
#| connection: duckdb_con
#| output.var: sql_var
SELECT *
FROM historical_data;
```



::: code-fold-flex
```{r}
#| label: "historicalSampleSetup"
#| code-summary: "table setup"

r_df <- tbl(
duckdb_con, "historical_data") |>
select(!'visibility') |>
slice_sample(n = 20) |>
arrange(date) |>
collect() |>
dplyr::mutate(
date = as.character.POSIXt(date),
date = forcats::as_factor(date),
date = forcats::fct_inorder(date)
)

locations_list = colnames(r_df)

notes_list <- c(
  "Date and time in POSIXt.",
  "Temperature at 2 meters above the ground in Fahrenheit.",
  "Total precipitation in inches.",
  "Rain precipitation in inches.",
  "Snowfall in inches.",
  "Snow depth in inches.",
  "Visibility in miles.",
  "Weather code indicating the current weather condition.",
  "Wind speed at 10 meters above the ground in miles per hour.",
  "Wind direction at 10 meters above the ground in degrees.",
  "Cardinal wind directions."
)

footnotes_df <- tibble(
  notes = notes_list, 
  locations = locations_list
)

pal_df <- tibble(
  cols = locations_list,
  pals = list(eval_palette("grDevices::Greens 3", , 'c', -1))
)

rTable <- r_table_theming(
r_df,
title = "Historical View",
subtitle = NULL,
footnotes_df,
source_note = md("**source**: "),
pal_df,
footnotes_multiline = TRUE,
table_font_size = pct(100)
)

```
:::

:::: large-tables
::: table-flex
```{r}
#| label: "tbl-historicalSample"
#| echo: false
#| column: screen-inset-right
rTable
```
:::
::::

### Plot Testing

::: {#fig-weather layout-ncol="3" fig-cap="These are the grouped figures."}
```{r}
#| label: "fig-weather_codes"
#| lightbox: 
#|   group: weather
#|   description: "Simple weather codes for simple insights." 
#| fig-cap: "Weather Codes"
#| echo: false
#| warning: false
#| message: false
plot_weather_codes(duckdb_con)
```

```{r}
#| label: "fig-temperature_freezing"
#| lightbox: 
#|   group: weather
#|   description: "Temperature with freezing point indicators." 
#| fig-subcap: "Freezing/Non-Freezing Temperature"
#| echo: false
#| warning: false
#| message: false
plot_temperature_trend(duckdb_con)
```

```{r}
#| label: "fig-visibility_km"
#| lightbox: 
#|   group: weather
#|   description: "Visibility in kilometers." 
#| fig-cap: "Visibility (km)"
#| echo: false
#| warning: false
#| message: false
plot_visibility_heat(duckdb_con)
```

```{r}
#| label: "fig-visibility_categories"
#| lightbox: 
#|   group: 
#|   description: "Simple visiblity categories." 
#| fig-cap: "Visibility Categories"
#| echo: false
#| warning: false
#| message: false
plot_visibility_categorical_heat(duckdb_con)
```

```{r}
#| label: "fig-precipitation"
#| lightbox: 
#|   group: weather
#|   description: "Indicator for rain and or snowfall." 
#| fig-cap: "Precipitation (empty if no precipitation)"
#| echo: false
#| warning: false
#| message: false
plot_precipitation(duckdb_con)
```

```{r}
#| label: "fig-wind_rose"
#| lightbox: 
#|   group: weather
#|   description: "Wind direction and speed." 
#| fig-cap: "Wind Rose"
#| echo: false
#| warning: false
#| message: false
plot_wind_rose_ggplot(duckdb_con)
```
:::

@fig-weather

@fig-weather_codes

@fig-temperature_freezing

@fig-visibility_km

@fig-visibility_categories

@fig-precipitation

@fig-wind_rose

```{r}
#| label: ""



```

```{r}
#| label: ""



```

# Topography

## Route Geometry and Elevation

Might help with determining fuel cost and time of trip?

```{r}
#| label: "osrm"
#| code-summary: "Creates a linestring object for the map."
#| message: false

# R example (osmdata)
library(osmdata)
library(osrm)
library(sf)
library(FedData)
library(terra)
library(leaflet)

# stl regional freightway to walmart distribution center
route <- osrmRoute(
src = c(-90.189781, 38.627480), 
dst = c(-91.634422, 38.002338)
)

write_sf(route, "route.geojson")  # Save for DuckDB
```

```{r}
#| label: "getSpatRaster"
#| code-summary: "Topological map data is retrieved, creating a SpatRaster object."
#| message: false

# Define the bounding box (min_lon, min_lat, max_lon, max_lat)
bbox <- st_bbox(
c(
xmin = -90.189781, 
ymin = 38.627480, 
xmax = -91.634422, 
ymax = 38.002338), 
crs = 4326)

# Convert to an sf polygon
route_area <- st_as_sfc(bbox)

route_area <- st_transform(route_area, 4326)

dem <- get_ned(template = route_area, label = "route_dem")
```

::: {#fig-topography layout="[[1],[2],[3]]" fig-cap="Map figures"}
```{r}
#| label: "fig-route"
#| lightbox: 
#|   group: topograhy
#|   description: "Geometric route without map background." 
#| fig-cap: "Geometric route"
#| echo: false
#| warning: false
#| error: false

plot(st_geometry(route))
```

```{r}
#| label: "fig-topo"
#| lightbox: 
#|   group: topograhy
#|   description: "Topological data" 
#| fig-cap: "Topological plot without route"
#| echo: false
#| warning: false
#| error: false

plet(
dem, 
tiles = "OpenTopoMap", 
main = "Topographical\nElevation\n(DEM)")
```

```{r}
#| label: "fig-topoRoute"
#| lightbox: 
#|   group: topograhy
#|   description: "Route mapped to topological data" 
#| fig-cap: "Topological plot with route"
#| echo: false
#| warning: false
#| error: false
#| out-width: 100%
#| column: screen


plet(
     dem, 
     tiles = "OpenTopoMap", 
     main = "Topographical\nElevation\n(DEM)") |>
     addPolylines(
     data = route, 
     color = "red", 
     weight = 2, 
     opacity = 0.8)
     
```
:::

# Disconnect From Databases

::: code-fold-flex
```{r}
#| label: "dbDisconnect"
#| code-summary: "Dereference memory from the in-memory database connections."
dbDisconnect(duckdb_con)
```
:::
