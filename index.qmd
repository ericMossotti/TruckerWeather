---
title: "Weather Assistant"

bibliography: bibliography/references.bib

citation: false
citation-location: margin
citations-hover: true

code-copy: true
code-fold: true
code-link: true
code-overflow: wrap
code-tools: true

fig-responsive: true

lightbox: true

source: true
---

```{r}
#| label: rLibraries
#| echo: false
#| warning: false
#| message: false

library(arrow)
library(DBI)
library(dbplyr)
library(dplyr)
library(duckdb)
library(forcats)
library(ggplot2)
library(gt)
library(lubridate)
library(odbc)
library(openair)
#library(pillar)
library(pryr)
library(purrr)
library(paletteer)
#library(plotly)
#library(plumber)
library(polars)
library(png)
#library(profvis)
library(readr)
library(reticulate)
library(scales)
library(tibble)
library(tidyr)
```

```{python}
#| label: pythonImports
#| echo: false
#| warning: false
#| message: false
import openmeteo_requests
import pandas as pd
import polars as pl
import requests_cache
from retry_requests import retry
```

## Database Connections

### MSSQL

```{r}
#| include: false
#| eval: false
#| echo: false
#| code-summary: "Optional: One would execute something like this in their bash terminal if on Ubuntu to get the odbc drivers for mssql connections."
##| file: "practice/Bash/mssql_odbc_driver.sh"
```

::: code-fold-flex
```{r}
#| label: "mssqlconnect"
#| code-summary: "Currently optional: Connects to a dockerized mssql database."
#| eval: false
#| echo: true

# Set up the connection
mssql_con <- dbConnect(
  odbc::odbc(),
  driver = "ODBC Driver 18 for SQL Server", 
  server = "localhost,1433",               
  database = "TestDB",                    
  uid = "sa",                             
  pwd = "MyStr@ngPassw0rd11",             
  TrustServerCertificate = "yes"
)
```
:::

### DuckDB

::: code-fold-flex
```{r}
#| label: "duckDBconnected"
#| code-summary: "Establish a DuckDB, embedded database connection."
duckdb_con <- dbConnect(duckdb::duckdb(
     config = list(max_memory = '24GB')), ":memory:")
```
:::

## Custom Output Tools

### Tables

::: code-fold-flex
```{r}
#| label: "loadTableOutput"
#| code-summary: "table building and theming"
#| file: "scripts/Output/Tables/table_workshop.R"
```
:::

#### Plots

::: code-fold-flex
```{r}
#| label: "loadPlotOutput"
#| code-summary: "plot theming"
#| file: "scripts/Output/Plots/plot_themer.R"
```
:::

::: code-fold-flex
```{r}
#| label: "loadPlotWorkshop"
#| code-summary: "plot building"
#| file: "scripts/Output/Plots/plot_workshop.R"
```
:::

## Weather Data API Connection

[@openMeteo_2025]

### Import Hourly Data

::: code-fold-flex
```{python}
#| label: loadHourlyAPIscript
#| code-summary: "Run the API script to import the dataset."
#| file: "scripts/Import/API/Hourly/import_api_hourly.py"
```
:::

::: code-fold-flex
```{r}
#| label: writeHourlyForecastAPIdata
#| code-summary: "Write hourly api results."

dbWriteTable(
duckdb_con, 
"hourly_day_forecast", 
data.frame(py$import_api_hourly(38.748, -90.439)),
overwrite = TRUE
)
```
:::

::: code-fold-flex
```{python}
#| label: loadHourlyHistoricalAPIscript
#| code-summary: "Run the API script to import the dataset."
#| file: "scripts/Import/API/Hourly/import_api_hourly_historical.py"
```
:::

::: code-fold-flex
```{r}
#| label: writeHourlyAPIdata
#| code-summary: "Write hourly api historical data."

dbWriteTable(
duckdb_con, 
"hourly_historical_weather",
py$import_api_hourly_historical(38.748, -90.439),
overwrite = TRUE
)
```
:::

### Realistic Coordinate Examples

| Location Name | Address | Lat, Long |
|------------------------|------------------------|------------------------|
| \- | Intersection of Hwy 70 & 270 | 38.748, -90.439 |
| The St. Louis Regional Freightway | \- | 38.627480, -90.189781 |
| Port of St. Louis | \- | 38.609215, -90.204275 |
| USPS Office Kansas City International Airport | \- | 39.304413, -94.720711 |
| Walmart Distribution Center | 1100 Matlock Dr, Saint James, MO 65559-9026 | 38.002338, -91.634422 |
| KCS International Freight Gateway | 3301 East 147th Street, Kansas City, MO 64147 | 38.84930037041913, -94.55499143307868 |

: Real locations that might be points of interest for truckers.

### Enum

::: code-fold-flex
```{r}
#| label: "setEnumsFile"
#| code-summary: "load enum file"
#| file: "scripts/Setup/Enum/create_enum_and_associate.R"
```
:::

::: code-fold-flex
```{r}
#| label: "setEnums"
#| code-summary: "Sets the custom data types in the database."

codes <- c(
'0',
'1',
'2',
'3',
'45',
'48',
'51',
'53',
'55',
'56',
'57',
'61',
'63',
'65',
'66',
'67',
'71',
'73',
'75',
'77',
'80',
'81',
'82',
'85',
'86',
'95',
'96',
'99'
)

descriptions <- c(
'Clear sky',
'Mainly clear',
'Partly cloudy',
'Overcast',
'Fog',
'Depositing rime fog',
'Drizzle: light',
'Drizzle: moderate',
'Drizzle: dense',
'Freezing drizzle: light',
'Freezing drizzle: dense',
'Rain: slight',
'Rain: moderate',
'Rain: heavy',
'Freezing rain: light',
'Freezing rain: heavy',
'Snow fall: slight',
'Snow fall: moderate',
'Snow fall: heavy',
'Snow grains',
'Rain showers: slight',
'Rain showers: moderate',
'Rain showers: violent',
'Snow showers: slight',
'Snow showers: heavy',
'Thunderstorm: slight or moderate',
'Thunderstorm with slight hail',
'Thunderstorm with heavy hail'
)

create_enum_and_associate(duckdb_con, "WeatherCode", codes, descriptions)

```
:::

::: code-fold-flex
```{r}
#| label: "wcSetup"
#| code-summary: "table setup"

rTable <- tbl(duckdb_con, "WeatherCode") |> collect()

locations_list = colnames(rTable)

notes_list =  list(
"World Meteorlogical Organization (WMO) code.", 
"Type of meterological event.")

footnotes_df <- tibble(
  notes = notes_list, 
  locations = locations_list)

pal_df <- tibble(
  cols = locations_list,
  pals = list(eval_palette("basetheme::brutal", 7, 'd', 1))
)

rTable <- r_table_theming(
rTable,
title = "Weather Code: As Data Type",
subtitle = NULL,
footnotes_df,
source_note = md("**source**: World Meteorlogical Organization"),
pal_df,
multiline_feet = TRUE,
tbl_font_size = pct(85),
target_everything = TRUE,
color_by_columns = "Code",
#row_name_col = "Model"
)

```
:::

[@noaa_wmo_2025]

:::: skinny-tables
::: table-flex
```{r}
#| label: "tbl-wc"
#| echo: false
#| tbl-cap: "How the WMO codes are\n associated to weather events."

rTable
```
:::
::::

# Modeling Weather

::: p-1
The study, published in the *Weather and Forecasting* journal, focuses on evaluating and improving the accuracy of weather prediction models, particularly for severe weather events. It examines the performance of high-resolution numerical weather prediction (NWP) models in forecasting convective storms, which are critical for predicting severe weather such as thunderstorms, hail, and tornadoes. The research highlights advancements in model resolution, data assimilation techniques, and the integration of observational data to enhance forecast precision. The findings emphasize the importance of these improvements for short-term (nowcasting) and medium-range forecasts, particularly in regions prone to severe weather, like the central United States (including Missouri). @dowell_high-resolution_2022
:::

::: code-fold-flex
```{r}
#| label: "forecastModelDescription"
#| code-summary: "table setup"
#| warning: false

# Create the tibble
forecast_models <- tibble(
     Model = c("GFS", "HRRR"),
     Developed_By = c(
          "NOAA (National Oceanic and Atmospheric Administration)",
          "NOAA (specifically by the Earth System Research Laboratory)"
     ),
     Scope = c(
          "Global",
          "Regional (primarily focused on the contiguous United States)"
     ),
     Resolution = c(
          "Lower resolution compared to HRRR (approximately 13 km as of recent updates)",
          "High resolution (3 km)"
     ),
     Forecast_Range = c("Up to 16 days", "Up to 18 hours"),
     Updates = c("Runs four times a day (00Z, 06Z, 12Z, 18Z)", "Runs every hour"),
     Applications = c(
          "Used for long-term weather forecasting, climate modeling, and global weather patterns.",
          "Ideal for short-term, detailed weather forecasting, including severe weather events like thunderstorms, tornadoes, and localized precipitation."
     )
)

locations_list = colnames(forecast_models)

notes_list =  list(
     "",
  "Organization or entity responsible for developing the model.",
  "Geographical coverage of the model (e.g., global or regional).",
  "Spatial resolution of the model, indicating the level of detail in the forecasts.",
  "Time period for which the model provides forecasts.",
  "Frequency at which the model is updated with new data.",
  "Primary uses and strengths of the model in weather forecasting."
  )

footnotes_df <- tibble(
  notes = notes_list, 
  locations = locations_list)

pal_df <- tibble(
  cols = locations_list
#  pals = list(eval_palette("viridis::viridis", 2, 'c', 1))
)

rTable <- r_table_theming(
forecast_models,
title = "Forecast Models: Attributes",
subtitle = NULL,
footnotes_df,
source_note = md("**source**: "),
pal_df,
multiline_feet = TRUE,
tbl_font_size = pct(85),
target_everything = TRUE,
row_name_col = "Model",
)
```
:::

::::: {#one}
:::: medium-large-tables
::: table-flex
```{r}
#| label: "tbl-modelAttributes"
#| warning: false
#| echo: false
#| column: body-outset-right

rTable |>
opt_css(
css = '
#one .gt_table_body td.gt_row {
box-shadow: -1px -1px 7px 1px rgba(0, 0, 0, 0.2) inset;
} 
'
)
```
:::
::::
:::::

::: code-fold-flex
```{r}
#| label: "modelDiffSetup"
#| code-summary: "table setup"
#| message: false
#| error: false

forecast_model_differences <- tibble(
"Resolution" = c(
"HRRR has a much higher resolution than GFS, making it more accurate for short-term, localized forecasts."
),
"Forecast_Range" = c("GFS provides forecasts for a much longer period compared to HRRR."),
"Update_Frequency" =  c(
"HRRR updates more frequently, which is crucial for capturing rapidly changing weather conditions."
)
)

locations_list = colnames(forecast_model_differences)

notes_list =  list(
  "Spatial resolution of the model, indicating the level of detail in the forecasts.",
  "Time period for which the model provides forecasts.",
  "Frequency at which the model is updated with new data.")

footnotes_df <- tibble(
  notes = notes_list, 
  locations = locations_list)

pal_df <- tibble(
  cols = locations_list
#  pals = list(eval_palette("viridis::viridis", 2, 'c', 1))
)

rTable <- r_table_theming(
forecast_model_differences,
title = "Forecast Models: Differences",
subtitle = NULL,
footnotes_df,
source_note = md("**source**: "),
pal_df,
multiline_feet = TRUE,
tbl_font_size = pct(85),
target_everything = TRUE,
row_name_col = NULL
)
```
:::

::::: {#two}
:::: medium-large-tables
::: table-flex
```{r}
#| label: "tbl-modelDiffs"
#| echo: false
rTable |>
opt_css(
css = '
#two .gt_table_body td.gt_row {
box-shadow: -1px -1px 7px 1px rgba(0, 0, 0, 0.2) inset;
} 
'
)
```
:::
::::
:::::

## Weather Condition Analysis

### FROM to Table

::: code-fold-flex
```{r}
#| label: "historicalSampleSetup"
#| code-summary: "table setup"

r_df <- tbl(
duckdb_con, "hourly_historical_weather") |>
dplyr::select(!'visibility') |>
dplyr::slice_sample(n = 20) |>
dplyr::collect() |>
dplyr::mutate(
date = as.character.POSIXt(date),
date = forcats::as_factor(date)
)

locations_list = colnames(r_df)

notes_list <- c(
  "Date and time in POSIXt.",
  "Temperature at 2 meters above the ground in Fahrenheit.",
  "Total precipitation in inches.",
  "Rain precipitation in inches.",
  "Snowfall in inches.",
  "Snow depth in inches.",
  #"Visibility in miles.",
  "Weather code indicating the current weather condition.",
  "Wind speed at 10 meters above the ground in miles per hour.",
  "Wind direction at 10 meters above the ground in degrees."
)

footnotes_df <- tibble(
  notes = notes_list, 
  locations = locations_list
)

pal_df <- tibble(
  cols = locations_list,
  pals = list(eval_palette("grDevices::Greens 3", , 'c', -1))
)

rTable <- r_table_theming(
r_df,
title = "Historical View",
subtitle = NULL,
footnotes_df,
source_note = md("**source**: "),
pal_df,
multiline_feet = TRUE,
tbl_font_size = pct(80)
)
```
:::

:::: large-tables
::: table-flex
```{r}
#| label: "tbl-historicalSample"
#| echo: false
#| column: screen-inset-right
rTable
```
:::
::::

### GGplot Testing

::: {#fig-weather layout-ncol="3" fig-cap="These are the grouped figures."}
```{r}
#| label: "fig-weather_codes"
#| lightbox: 
#|   group: weather
#|   description: "Simple weather codes for simple insights." 
#| fig-cap: "Weather Codes"
#| echo: false
#| warning: false
#| message: false
plot_weather_codes(duckdb_con)
```

```{r}
#| label: "fig-temperature_freezing"
#| lightbox: 
#|   group: weather
#|   description: "Temperature with freezing point indicators." 
#| fig-subcap: "Freezing/Non-Freezing Temperature"
#| echo: false
#| warning: false
#| message: false
plot_temperature_trend(duckdb_con)
```

```{r}
#| label: "fig-visibility_km"
#| lightbox: 
#|   group: weather
#|   description: "Visibility in kilometers." 
#| fig-cap: "Visibility (km)"
#| echo: false
#| warning: false
#| message: false
plot_visibility_heat(duckdb_con)
```

```{r}
#| label: "fig-visibility_categories"
#| lightbox: 
#|   group: 
#|   description: "Simple visiblity categories." 
#| fig-cap: "Visibility Categories"
#| echo: false
#| warning: false
#| message: false
plot_visibility_categorical_heat(duckdb_con)
```

```{r}
#| label: "fig-precipitation"
#| lightbox: 
#|   group: weather
#|   description: "Indicator for rain and or snowfall." 
#| fig-cap: "Precipitation (empty if no precipitation)"
#| echo: false
#| warning: false
#| message: false
plot_precipitation(duckdb_con)
```

```{r}
#| label: "fig-wind_rose"
#| lightbox: 
#|   group: weather
#|   description: "Wind direction and speed." 
#| fig-cap: "Wind Rose"
#| echo: false
#| warning: false
#| message: false
plot_wind_rose_ggplot(duckdb_con)
```
:::

@fig-weather

@fig-weather_codes

@fig-temperature_freezing

@fig-visibility_km

@fig-visibility_categories

@fig-precipitation

@fig-wind_rose

# Topography

## Route Geometry and Elevation

Might help with determining fuel cost and time of trip?

```{r}
#| label: "osrm"
#| code-summary: "Creates a linestring object for the map."
#| message: false


# R example (osmdata)
library(osmdata)
library(osrm)
library(sf)
library(FedData)
library(terra)
library(leaflet)

# stl regional freightway to walmart distribution center
route <- osrmRoute(
src = c(-90.189781, 38.627480), 
dst = c(-91.634422, 38.002338)
)

write_sf(route, "route.geojson")  # Save for DuckDB
```

```{r}
#| label: "getSpatRaster"
#| code-summary: "Topological map data is retrieved, creating a SpatRaster object."
#| message: false

# Define the bounding box (min_lon, min_lat, max_lon, max_lat)
bbox <- st_bbox(
c(
xmin = -90.189781, 
ymin = 38.627480, 
xmax = -91.634422, 
ymax = 38.002338), 
crs = 4326)

# Convert to an sf polygon
route_area <- st_as_sfc(bbox)

route_area <- st_transform(route_area, 4326)

dem <- get_ned(template = route_area, label = "route_dem")
```

::: {#fig-topography layout="[[1],[2],[3]]" fig-cap="Map figures"}
```{r}
#| label: "fig-route"
#| lightbox: 
#|   group: topograhy
#|   description: "Geometric route without map background." 
#| fig-cap: "Geometric route"
#| echo: false
#| warning: false
#| error: false

plot(st_geometry(route))
```

```{r}
#| label: "fig-topo"
#| lightbox: 
#|   group: topograhy
#|   description: "Topological data" 
#| fig-cap: "Topological plot without route"
#| echo: false
#| warning: false
#| error: false
#| out-width: 50%
#| fig-align: center

plet(
dem, 
tiles = "OpenTopoMap", 
main = "Topographical\nElevation\n(DEM)")

```

```{r}
#| label: "fig-topoRoute"
#| lightbox: 
#|   group: topograhy
#|   description: "Route mapped to topological data" 
#| fig-cap: "Topological plot with route"
#| echo: false
#| warning: false
#| error: false
#| out-width: 100%
#| column: screen


plet(
     dem, 
     tiles = "OpenTopoMap", 
     main = "Topographical\nElevation\n(DEM)") |>
     addPolylines(
     data = route, 
     color = "red", 
     weight = 2, 
     opacity = 0.8)
     
```
:::

# Disconnect From Databases

::: code-fold-flex
```{r}
#| label: "dbDisconnect"
#| code-summary: "Dereference memory from the in-memory database connections."
dbDisconnect(duckdb_con)
```
:::
