[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Weather Assistant",
    "section": "",
    "text": "Can brokers involved with bids for shipping contracts via road be better informed with data pertaining to the weather and other factors deemed relevant to the bid price?"
  },
  {
    "objectID": "index.html#purpose",
    "href": "index.html#purpose",
    "title": "Weather Assistant",
    "section": "",
    "text": "Can brokers involved with bids for shipping contracts via road be better informed with data pertaining to the weather and other factors deemed relevant to the bid price?"
  },
  {
    "objectID": "index.html#broker-bid-contract-pricing",
    "href": "index.html#broker-bid-contract-pricing",
    "title": "Weather Assistant",
    "section": "Broker Bid Contract Pricing",
    "text": "Broker Bid Contract Pricing\nPossible Influencing Factors\n\nWeather related factors\nTruck’s attributes\nGas prices\n\nTraffic\n\nAccidents\nLocal events\n\n\n\nSeason of year\n\nholidays\n\n\n\nDay of week\n\nWeekend vs work week\n\n\nTime of day\nRoad topology"
  },
  {
    "objectID": "index.html#what-can-ai-help-with",
    "href": "index.html#what-can-ai-help-with",
    "title": "Weather Assistant",
    "section": "What can AI help with?",
    "text": "What can AI help with?\n\nMaking decisions that require more logic than what can be hard-coded in a reasonable amount of time."
  },
  {
    "objectID": "index.html#database-connections",
    "href": "index.html#database-connections",
    "title": "Weather Assistant",
    "section": "Database Connections",
    "text": "Database Connections\nMSSQL\n\n\nCurrently optional: Connects to a dockerized mssql database.# Set up the connection\nmssql_con &lt;- dbConnect(\n  odbc::odbc(),\n  driver = \"ODBC Driver 18 for SQL Server\", \n  server = \"localhost,1433\",               \n  database = \"TestDB\",                    \n  uid = \"sa\",                             \n  pwd = \"MyStr@ngPassw0rd11\",             \n  TrustServerCertificate = \"yes\"\n)\n\n\n\nDuckDB\n\n\nEstablish a DuckDB, embedded database connection.duckdb_con &lt;- dbConnect(duckdb::duckdb(\n     config = list(max_memory = '24GB')), \":memory:\")"
  },
  {
    "objectID": "index.html#loading-custom-output-scripts",
    "href": "index.html#loading-custom-output-scripts",
    "title": "Weather Assistant",
    "section": "Loading Custom Output Scripts",
    "text": "Loading Custom Output Scripts\nTables\n\n\ntable building# Table Theming Script ----\n#' @description\n#' This script provides functions to create and theme tables using the `gt` package.\n#' It includes options for customizing colors, footnotes, and other stylistic elements.\n#' \n# eval_palette ----\n#' @description\n#' A helper function to evaluate color palettes using the `paletteer` package.\n#' @param pal_name The name of the palette to evaluate.\n#' @param n The number of colors to generate (default is 10).\n#' @param pal_type The type of palette (\"c\" for continuous, \"d\" for discrete, or \"dynamic\" for dynamic palettes).\n#' @param direction The direction of the palette (e.g., 1 for normal, -1 for reversed).\n#' \n#' @return A vector of colors corresponding to the specified palette.\n#' \n#' @example\n#' \\dontrun{\n#' colors &lt;- eval_palette(\"ggsci::springfield_simpsons\", n = 5, pal_type = \"d\")\n#' }\n#' @export \neval_palette &lt;- function(pal_name, n = 10, pal_type, direction = NULL) {\n     if (pal_type == \"c\") {\n          return(paletteer_c(pal_name, n, direction))\n     } else if (pal_type == \"d\") {\n          return(paletteer_d(pal_name, n, direction))\n     } else if (pal_type == \"dynamic\") {\n          return(paletteer_dynamic(pal_name, n, direction))\n     }\n}\n\n# r_table_theming ----\n#' @description\n#' The main function to create and theme a table using the `gt` package.\n#' @details\n#' **Color Coding** Applies color palettes to specific columns or the entire table.\n#' **Footnotes** Adds footnotes to specific columns or locations in the table.\n#' **Column Labels** Customizes the appearance of column labels, including background colors.\n#' **Table Styling** Applies various styling options, such as borders, padding, and font weights.\n#' **Shadow Effects** Optionally adds shadow effects to table body cells.\n#'\n#' @param r_df The data frame to be converted into a table.\n#' @param title The title of the table.\n#' @param subtitle The subtitle of the table.\n#' @param footnotes_df A data frame containing footnotes and their locations.\n#' @param source_note A source note to be added at the bottom of the table.\n#' @param pal_df A data frame containing color palettes and columns to apply them to.\n#' @param color_by_columns Columns to apply color to (default is NULL).\n#' @param row_name_col The column to use as row names (default is NULL).\n#' @param do_col_labels Whether to apply custom styling to column labels (default is FALSE).\n#' @param target_everything Whether to apply color to all columns (default is FALSE).\n#' @param doBodyShadows Whether to apply shadow effects to table body cells (default is FALSE).\n#'\n#' @return A themed `gt` table object.\n#' \n#' @example \n#' \\dontrun{\n#'   data &lt;- data.frame(\n#'     Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n#'     Score = c(85, 92, 78)\n#'   )\n#'   pal_df &lt;- data.frame(\n#'     cols = list(\"Score\"),\n#'     pals = list(eval_palette(\"ggsci::springfield_simpsons\", n = 3, pal_type = \"d\"))\n#'   )\n#'   footnotes_df &lt;- data.frame(\n#'     notes = list(\"High score\"),\n#'     locations = list(\"Score\")\n#'   )\n#'   themed_table &lt;- r_table_theming(\n#'     r_df = data,\n#'     title = \"Student Scores\",\n#'     subtitle = \"Fall 2023\",\n#'     footnotes_df = footnotes_df,\n#'     source_note = \"Source: School Records\",\n#'     pal_df = pal_df,\n#'     do_col_labels = TRUE\n#'   )\n#'   themed_table\n#'  }\n#'  \n# r_table_theming ----\n# Main function to create and theme a table using the `gt` package.\n#' @export\nr_table_theming &lt;- function(r_df,\n                            title,\n                            subtitle,\n                            footnotes_df,\n                            source_note,\n                            pal_df,\n                            color_by_columns = NULL,\n                            row_name_col = NULL,\n                            do_col_labels = FALSE,\n                            target_everything = FALSE,\n                            doBodyShadows = FALSE,\n                            footnotes_multiline = TRUE,\n                            table_font_size = pct(100),\n                            multiline_feet = TRUE\n                            ) {\n     # Initialize the gt table\n     if(is.null(row_name_col)) {\n          # If no row name column is specified, create a basic gt table\n          r_table &lt;- gt(r_df)\n     } else {\n          # If a row name column is specified, use it as the row names in the table\n          r_table &lt;- gt(r_df, rowname_col = row_name_col)\n     }\n     \n     # Apply color coding to specific columns or the entire table\n     if (nrow(r_df) &gt; 1 && target_everything == FALSE) {\n          # Apply color palettes to specific columns defined in pal_df\n          r_table &lt;- seq_len(nrow(pal_df)) |&gt;\n               reduce(\\(acc, i) {\n                    data_color(acc,\n                               columns = pal_df$cols[[i]],  # Apply color to specified columns\n                               palette = pal_df$pals[[i]]   # Use the specified palette\n                    )\n               }, .init = r_table)  # Start with the initial table and accumulate changes\n     }\n     else if (nrow(r_df) &gt; 1 && target_everything == TRUE) {\n          # Apply color palettes to all columns\n          r_table &lt;- seq_len(nrow(pal_df)) |&gt;\n               reduce(\\(acc, i) {\n                    data_color(\n                         acc,\n                         columns = color_by_columns,  # Apply color to specified columns\n                         palette = pal_df$pals[[i]],  # Use the specified palette\n                         target_columns = everything()  # Apply color to all columns\n                    )\n               }, .init = r_table)  # Start with the initial table and accumulate changes\n     }\n     \n     # Add footnotes to the table\n     r_table &lt;- seq_len(nrow(footnotes_df)) |&gt;\n          reduce(\\(acc, i) {\n               tab_footnote(\n                    acc,\n                    footnote = footnotes_df$notes[[i]],  # Add the footnote text\n                    location = cells_column_labels(\n                         columns = footnotes_df$locations[[i]]),  # Specify the column for the footnote\n                    placement = \"auto\"  # Automatically place the footnote\n               )\n          }, .init = r_table)  # Start with the initial table and accumulate changes\n     \n     # Apply custom styling to column labels (if enabled)\n     if (ncol(r_df) &gt; 1 && do_col_labels == TRUE) {\n          cell_col_fills = pal_df$pals[[1]]  # Get the first palette for column labels\n          # Apply background colors to column labels\n          r_table &lt;- seq_len(nrow(pal_df)) |&gt;\n               reduce(\\(acc, i) {\n                    tab_style(\n                         acc,\n                         style = cell_fill(color = cell_col_fills[i]),  # Fill column labels with color\n                         locations = cells_column_labels(\n                              columns = pal_df$cols[[i]])  # Apply to specified columns\n                    )\n               }, .init = r_table)  # Start with the initial table and accumulate changes\n     }\n     \n     # Add a title and subtitle to the table\n     r_table &lt;- r_table |&gt;\n          tab_header(title = title, subtitle = subtitle)\n     \n     # Add a source note at the bottom of the table\n     r_table &lt;- r_table |&gt;\n          tab_source_note(source_note = source_note)\n     \n     # Apply general table styling options\n     r_table &lt;- r_table |&gt;\n          tab_options(\n               column_labels.padding = px(10),  # Add padding to column labels\n               column_labels.font.weight = \"bold\",  # Make column labels bold\n               column_labels.background.color = '#333',  # Set background color for column labels\n               column_labels.border.top.width = px(0),  # Remove top border for column labels\n               column_labels.border.bottom.color = 'black',  # Set bottom border color for column labels\n               column_labels.vlines.width = px(1),  # Set vertical line width for column labels\n               column_labels.border.lr.width = px(1),  # Set left/right border width for column labels\n               column_labels.border.bottom.width = px(0),  # Remove bottom border for column labels\n               column_labels.border.lr.color = 'black',  # Set left/right border color for column labels\n               column_labels.vlines.color = 'black',  # Set vertical line color for column labels\n               footnotes.padding = px(5),  # Add padding to footnotes\n               footnotes.background.color = '#222',  # Set background color for footnotes\n               footnotes.sep = \", \",  # Set separator for footnotes\n               footnotes.multiline = footnotes_multiline,  # Allow multiline footnotes (if enabled)\n               heading.padding = px(10),  # Add padding to the heading\n               heading.background.color = '#222',  # Set background color for the heading\n               heading.title.font.size = pct(125),  # Set font size for the title\n               heading.subtitle.font.size = pct(110),  # Set font size for the subtitle\n               heading.border.bottom.width = px(0),  # Remove bottom border for the heading\n               row.striping.include_table_body = TRUE,  # Enable row striping for the table body\n               row.striping.include_stub = TRUE,  # Enable row striping for the stub\n               row.striping.background_color = '#333',  # Set background color for striped rows\n               row_group.as_column = TRUE,  # Display row groups as columns\n               source_notes.background.color = '#222',  # Set background color for source notes\n               stub.border.width = px(0),  # Remove border for the stub\n               stub.font.weight = \"bolder\",  # Make stub text bolder\n               table.margin.left = px(1),  # Set left margin for the table\n               table.margin.right = px(1),  # Set right margin for the table\n               table.align = \"center\",  # Center-align the table\n               table.border.top.width = px(0),  # Remove top border for the table\n               table.border.bottom.width = px(0),  # Remove bottom border for the table\n               table.background.color = '#222',  # Set background color for the table\n               table.font.size = table_font_size,  # Set font size for the table\n               table.layout = \"auto\",  # Use automatic table layout\n               table_body.hlines.color = 'black',  # Set horizontal line color for the table body\n               table_body.hlines.width = px(0),  # Remove horizontal lines in the table body\n               table_body.vlines.width = px(0),  # Remove vertical lines in the table body\n               table_body.border.bottom.color = 'black',  # Set bottom border color for the table body\n               table_body.border.top.color = 'black',  # Set top border color for the table body\n               table_body.border.bottom.width = px(0),  # Remove bottom border for the table body\n               table_body.border.top.width = px(0),  # Remove top border for the table body\n          )\n     \n     return(r_table)\n}\n\n\n\nPlots\n\n\nplot theming#  Plot output script ----\n# normal axes ----\nggplot_theming &lt;- function(...) {\n     base_theme &lt;- theme_minimal() +\n          theme(\n               axis.title = element_text(\n                    color = 'gray100',\n                    margin = margin(5, 5, 5, 5, \"pt\")\n               ),\n               axis.title.x = element_text(margin = margin(10, 10, 10, 10, \"pt\"), face = \"bold\"),\n               axis.title.y = element_text(\n                    face = \"bold\",\n                    size = rel(1),\n                    margin = margin(5, 5, 5, 5, \"pt\")\n               ),\n               axis.text = element_text(color = 'gray', margin = margin(5, 5, 5, 5, \"pt\")),\n               axis.text.x = element_text(),\n               axis.text.y = element_text(margin = margin(0, 5, 0, 5, \"pt\")),\n               axis.text.x.top = element_text(vjust = 0.5),\n               line = element_line(color = '#222'),\n               legend.background = element_rect(fill = '#222'),\n               legend.position = \"bottom\",\n               legend.text = element_text(color = 'gray', size = rel(0.7)),\n               legend.title = element_text(color = 'white', size = rel(1.0)),\n               panel.background = element_rect(fill = '#222',\n                                               linewidth = 0),\n               panel.grid.major.x = element_line(linetype = 'solid', color = 'black'),\n               panel.grid.minor.x = element_line(linetype = \"dotted\", color = 'black'),\n               panel.grid.major.y = element_line(\n                    linetype = 'solid',\n                    color = 'black',\n                    linewidth = .2\n               ),\n               panel.grid.minor.y = element_line(linetype = 'dotted', color = 'black'),\n               plot.title = element_text(\n                    face = \"bold\",\n                    color = 'white',\n                    size = rel(1.5)\n               ),\n               plot.background = element_rect(fill = '#222',\n                                              linewidth = 0),\n               plot.caption = element_text(\n                    size = 10,\n                    color = \"gray80\",\n                    margin = margin(5, 2, 5, 2),\n                    hjust = 0\n               ),\n               plot.margin = margin(10, 10, 10, 10, \"pt\"),\n               strip.background = element_rect(fill = 'gray20'),\n               strip.text = element_text(size = rel(0.8), \n                                         margin = margin(0, 0, 0, 0, \"pt\"),\n                                         color = 'cornsilk'),\n               #strip.text.y = element_text(color = \"black\"),\n              # strip.text.x = element_text(color = \"ivory\", face = \"plain\"),\n               text = element_text(size = 12)\n          )\n     \n     base_theme + theme(...)\n}\n\n# flipped axes ----\nggplot_theming_flipped_axes &lt;- function(...) {\n     base_theme &lt;- theme_minimal() +\n          theme(\n               axis.title = element_text(color = 'gray100'),\n               axis.text = element_text(color = 'gray'),\n               panel.background = element_rect(fill = '#222'),\n               panel.grid.major.x = element_line(linetype = 'dashed'),\n               panel.grid.minor.x = element_line(linetype = \"dotted\"),\n               panel.grid.major.y = element_line(linetype = 'solid'),\n               panel.grid.minor.y = element_line(linetype = 'dotted'),\n               plot.title = element_text(color = 'white', size = rel(2)),\n               plot.background = element_rect(fill = '#222'),\n               legend.background = element_rect(fill = '#222'),\n               legend.text = element_text(color = 'gray'),\n               legend.title = element_text(color = 'white')\n          )\n     \n     base_theme + theme(...)\n     \n}\n\n\n\n\n\nplot building# Load necessary libraries\nlibrary(DBI)          # For database connectivity\nlibrary(ggplot2)      # For creating plots\nlibrary(scales)       # For scaling and formatting axes\nlibrary(openair)      # For specialized plots like wind roses\nsource(\"./scripts/Output/Plots/plot_themer.R\")  # Custom theme for ggplot\n\n# Helper function to execute a query and return the result\nexecute_query &lt;- function(con, query) {\n     dbGetQuery(con, query)  # Execute the SQL query and return the result\n}\n\n\nplot_temperature_trend &lt;- function(con, freezing_threshold = 32) {\n     # Query to fetch temperature data for the day\n     query &lt;- \"\n    SELECT\n      temperature_2m,\n      time_only,\n      common_date,\n      month_day\n    FROM\n      forecast_data;\n  \"\n     \n     data &lt;- execute_query(con, query)  # Execute the query and get the data\n     \n     # Calculate bar width based on time intervals\n     if (nrow(data) &gt; 1) {\n          time_diff &lt;- as.numeric(difftime(data$common_date[2], data$common_date[1], units = \"secs\"))\n     } else {\n          time_diff &lt;- 3600  # Default to 1 hour if only one data point\n     }\n     half_width &lt;- time_diff / 2\n     \n     # Prepare data for rectangular columns\n     data &lt;- data %&gt;%\n          arrange(common_date) %&gt;%\n          mutate(\n               xmin = common_date - half_width,\n               xmax = common_date + half_width,\n               fill_group = ifelse(temperature_2m &gt; freezing_threshold, \"above freezing\", \"below freezing\"),\n               ymin = ifelse(temperature_2m &gt; freezing_threshold, freezing_threshold, temperature_2m),\n               ymax = ifelse(temperature_2m &gt; freezing_threshold, temperature_2m, freezing_threshold)\n          )\n     \n     # Create a ggplot object for temperature trend\n     rPlot &lt;- ggplot(data, aes(x = common_date, y = temperature_2m)) +\n          geom_rect(\n               aes(\n                    xmin = xmin,\n                    xmax = xmax,\n                    ymin = ymin,\n                    ymax = ymax,\n                    fill = fill_group\n               ),\n               color = 'black',\n               alpha = 0.5\n          ) +  # Column rectangles\n     #     geom_line(color = \"black\", size = 0.5) +  # Line plot for temperature\n          geom_hline(\n               yintercept = freezing_threshold,\n               linetype = \"dashed\",\n               color = \"lightblue\",\n               linewidth = 0.4\n          ) +  # Horizontal line for freezing threshold\n          labs(\n               title = \"Temperature Forecast\",\n               x = \"\",\n               y = \"° F\"\n          ) +  # Labels for the plot\n          scale_x_datetime(\n               labels = label_date(\"%l %p\"),\n               breaks = \"6 hours\",\n               minor_breaks = \"2 hours\",\n               guide = guide_axis(n.dodge = 1)\n          ) +  # Format x-axis for time\n          scale_y_continuous(sec.axis = dup_axis(name = \"\")) +  # Secondary y-axis\n          scale_fill_manual(\n               name = \"Freezing Indicators\",\n               values = c(\n                    \"above freezing\" = \"green\",\n                    \"below freezing\" = \"lightblue\"\n               )\n          ) +  # Manual color scale\n          facet_grid(~ month_day) +  # Facet by month_day\n          ggplot_theming()  # Apply custom theme\n     \n     # Save the plot as a PNG file\n     base_path &lt;- \"data/plots/\"\n     plot_path &lt;- paste0(base_path, \"ggTemperature.png\")\n     ggsave(plot_path, plot = rPlot, scale = 1.5)\n     \n     # Read the PNG file and display it\n     img &lt;- readPNG(plot_path)\n     grid::grid.raster(img)\n}\n\n# Precipitation and Probability ----\nplot_precipitation &lt;- function(con) {\n     # Query to fetch precipitation data\n     query &lt;- \"\n    SELECT\n      precipitation_probability,\n      precipitation,\n      rain,\n      snowfall,\n      time_only,\n      common_date,\n      month_day\n    FROM\n      forecast_data;\n  \"\n     \n     data &lt;- execute_query(con, query)  # Execute the query and get the data\n     \n     # Calculate scale factor for secondary y-axis\n     scale_factor &lt;- max(data$precipitation_probability, \n                         na.rm = TRUE) / max(data$rain, \n                                             data$snowfall, na.rm = TRUE)\n     \n     # Create a ggplot object for precipitation\n     rPlot &lt;- ggplot(data, aes(x = as.POSIXct(common_date))) +\n          geom_area(\n               aes(y = precipitation_probability, fill = \"Precipitation Probability\"),\n               #position = \"jitter\"\n               linewidth = 0.2\n          ) +  # Area plot for precipitation probability\n          geom_col(\n               aes(y = rain * scale_factor, fill = \"Rain (in.)\"),\n               #size = 1,\n               alpha = 0.3,\n               position = \"stack\",\n               #linetype = \"dashed\"\n          ) +  # Line plot for rain\n          geom_col(\n               aes(y = snowfall * scale_factor, fill = \"Snowfall (in.)\"),\n               #size = 1,\n               alpha = 0.3,\n               position = \"stack\",\n               #linetype = \"dotted\"\n          ) +  # Line plot for snowfall\n          scale_y_continuous(\n               name = \"Precipitation Probability (%)\",\n               sec.axis = sec_axis( ~ . / ifelse(\n                    is.infinite(scale_factor), 1000, scale_factor\n               ), name = \"Rain / Snowfall (inches)\")\n          ) +  # Dual y-axes\n          scale_x_datetime(\n               labels = scales::date_format(\"%H:%M\"),\n               breaks = \"6 hours\",\n               minor_breaks = \"2 hour\",\n               guide = guide_axis(n.dodge = 1)\n          ) +  # Format x-axis for time\n          scale_fill_manual(\n               name = \"Weather Condition\",\n               values = c(\n                    \"Rain (in.)\" = \"skyblue\",\n                    \"Snowfall (in.)\" = \"snow\"\n               )\n          ) +  # Manual color scale for weather conditions\n          scale_fill_manual(\n               name = \"Precipitation\\n and Probability\",  # Single legend title\n               values = c(\n                    \"Rain (in.)\" = \"skyblue\", \n                    \"Snowfall (in.)\" = \"snow\", \n                    \"Precipitation Probability\" = \"gray20\"\n               )) +\n               labs(title = \"Precipitation Forecast\", \n               x = \"Time of Day\", \n               y = \"Precipitation Probability (%)\") +  # Labels for the plot\n          facet_grid(~ month_day) +  # Facet by month_day\n          ggplot_theming(legend.position = \"bottom\", \n                         legend.text = element_text(size = rel(0.5)),\n                         legend.title = element_text(size = rel(0.7)))  # Apply custom theme\n     \n     # Save the plot as a PNG file\n     base_path &lt;- \"data/plots/\"\n     plot_path &lt;- paste0(base_path, \"ggPrecipitation.png\")\n     ggsave(plot_path, plot = rPlot, scale = 1.5)\n     \n     # Read the PNG file and display it\n     img &lt;- readPNG(plot_path)\n     grid::grid.raster(img)\n     \n}\n\n# OpenAir Wind Rose ----\nplot_wind_rose &lt;- function(con) {\n     # Query to fetch wind data\n     query &lt;- \"\n    SELECT\n      wind_speed_10m,\n      wind_direction_10m,\n      time_only,\n      common_date,\n      month_day\n    FROM\n      forecast_data;\n  \"\n     \n     data &lt;- execute_query(con, query)  # Execute the query and get the data\n     \n     # Create a wind rose plot using the openair package\n     windRose(\n          data,\n          ws = \"wind_speed_10m\",\n          wd = \"wind_direction_10m\",\n          breaks = 5,\n          paddle = TRUE,\n          cols = paletteer_d(\"ggsci::springfield_simpsons\", n = 3),\n          key.position = \"left\"\n     )\n}\n\n# ggplot wind rose ----\nplot_wind_rose_ggplot &lt;- function(con) {\n     # Query to fetch wind data\n     query &lt;- \"\n       SELECT\n         wind_direction_10m,\n         speed_bin,\n         wind_direction_cardinal,\n         direction_angle,\n         time_only,\n         month_day\n       FROM forecast_data;\n     \"\n     \n     data &lt;- execute_query(con, query)  # Execute the query and get the data\n     \n     # Summarize data for plotting\n     plot_data &lt;- data |&gt;\n          group_by(wind_direction_10m, speed_bin, month_day, time_only) |&gt;\n          summarise(count = n(), .groups = \"drop\")\n     \n     # Get unique days\n     days &lt;- unique(plot_data$month_day)\n     \n     walk(days, ~ {\n          # Filter data for the current day\n          day_data &lt;- filter(plot_data, month_day == .x)\n          \n          # Create the wind rose plot for the current day\n          day_plot &lt;- ggplot(day_data,\n                             aes(\n                                  x = wind_direction_10m, y = count, fill = speed_bin\n                             )) +\n               geom_col(width = 15,\n                        color = \"black\",\n                        linewidth = 0.1) +\n               coord_polar(start = 2 * pi) +\n               scale_x_continuous(\n                    limits = c(0, 360),\n                    breaks = seq(0, 360, by = 45),\n                    labels = c('N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW', 'N')  # Cardinal labels\n               ) +\n               scale_fill_paletteer_d('ggprism::viridis') +\n               labs(\n                    title = paste(\"Wind Rose -\", .x),\n                    x = \"Wind Direction (°)\",\n                    y = \"\",\n                    fill = \"Wind Speed (m/s)\"\n               ) +\n               facet_wrap( ~ time_only) +  # Facet by hour\n               ggplot_theming(\n                    text = element_text(size = 8),\n                    axis.text = element_text(\n                         color = 'gray',\n                         margin = margin(5, 5, 5, 5, \"pt\"),\n                         size = rel(.8)\n                    ),\n                    axis.text.y = element_blank(),\n                    strip.background = element_rect(fill = 'gray20'),\n                    #strip.background.y = element_rect('#39D94E'),\n                    strip.text = element_text(size = rel(0.8), \n                                              margin = margin(0, 0, 0, 0, \"pt\"),\n                                              color = 'cornsilk'),\n                    \n               )\n          \n          # Save the plot for the current day\n          ggsave(\n               stringr::str_remove(paste0(\"data/plots/wind_rose_\", .x, \".png\"), \" \"),\n               day_plot,\n               #width = 24,\n               #height = 20,\n               scale = 1.5\n          )\n     })\n     \n     #message(\"Plots saved for each day.\")\n}\n\n\n# Visibility geom_line ----\nplot_visibility_line &lt;- function(con) {\n     # Query to fetch visibility data\n     query &lt;- \"\n    SELECT\n      visibility,\n      common_date,\n      month_day\n    FROM\n      forecast_data;\n  \"\n     \n     data &lt;- execute_query(con, query)  # Execute the query and get the data\n     \n     # Create a ggplot object for visibility trend\n     rPlot &lt;- ggplot(data, aes(x = common_date, y = visibility / 10 ^ 3)) +\n          geom_line(color = \"white\", size = 0.5) +  # Line plot for visibility\n          geom_point(color = \"gray\", alpha = 1) +  # Points for visibility\n          labs(title = \"Visibility Map\", x = \"Date\", y = \"Visibility (km)\") +  # Labels for the plot\n          scale_x_datetime(\n               labels = scales::date_format(\"%H:%M\"),\n               breaks = \"6 hours\",\n               minor_breaks = \"2 hour\",\n               guide = guide_axis(n.dodge = 1)\n          ) +  # Format x-axis for time\n          facet_grid(~ month_day) +  # Facet by month_day\n          ggplot_theming()  # Apply custom theme\n     \n     # Save the plot as a PNG file\n     base_path &lt;- \"data/plots/\"\n     plot_path &lt;- paste0(base_path, \"ggVisibilityLine.png\")\n     ggsave(plot_path, plot = rPlot, scale = 1.5)\n     \n     # Read the PNG file and display it\n     img &lt;- readPNG(plot_path)\n     grid::grid.raster(img)\n     \n}\n\n# Visibility Non-Categorical Heat ----\nplot_visibility_heat &lt;- function(con) {\n     # Query to fetch visibility data\n     query &lt;- \"\n    SELECT\n      visibility,\n      common_date,\n      time_only,\n      month_day\n    FROM\n      forecast_data;\n  \"\n     \n     data &lt;- execute_query(con, query)  # Execute the query and get the data\n     data$time_only &lt;- as.POSIXct(data$time_only, format = \"%H:%M:%S\")\n     \n     # Create a ggplot object for visibility heatmap\n     rPlot &lt;- ggplot(data, aes(\n          x = month_day,\n          y = time_only,\n          fill = visibility / 10 ^ 3\n     )) +\n          geom_tile() +  # Tile plot for visibility\n          scale_fill_viridis_c(option = \"magma\") +  # Color scale for visibility\n          labs(\n               title = \"Visibility (km)\",\n               x = \"Time of Day\",\n               y = \"Date\",\n               fill = \"Visibility (km)\"\n          ) +  # Labels for the plot\n          scale_y_datetime(\n               date_labels = \"%H:%M\",\n               date_breaks = \"2 hours\",\n               sec.axis = dup_axis(name = \"\")\n          ) +  # Format x-axis for time\n          facet_grid(~ month_day, scales = \"free\") +\n          ggplot_theming(legend.position = \"right\")  # Apply custom theme\n     \n     # Save the plot as a PNG file\n     base_path &lt;- \"data/plots/\"\n     plot_path &lt;- paste0(base_path, \"ggVisibilityHeat.png\")\n     ggsave(plot_path, plot = rPlot, scale = 1.5)\n     \n     # Read the PNG file and display it\n     img &lt;- readPNG(plot_path)\n     grid::grid.raster(img)\n}\n\n# Visibility Categorical Heat ----\nplot_visibility_categorical_heat &lt;- function(con) {\n     # Query to fetch visibility data\n     query &lt;- \"\n    SELECT\n      visibility,\n      visibility_category,\n      common_date,\n      time_only,\n      month_day\n    FROM\n      forecast_data;\n  \"\n     \n     data &lt;- execute_query(con, query)  # Execute the query and get the data\n\n          # Create a ggplot object for categorical visibility heatmap\n     # Convert time_only to POSIXct for plotting\n     data$time_only &lt;- as.POSIXct(data$time_only, format = \"%H:%M:%S\")\n     \n     # Create a ggplot object for weather codes\n     rPlot &lt;- ggplot(data, aes(x = month_day, y = time_only, fill = visibility_category)) +\n          geom_tile() +  # Tile plot for visibility categories\n          scale_fill_manual(\n               values = c(\n                    \"Clearest (&gt;30 km)\" = \"green\",\n                    \"Excellent (10-30 km)\" = \"darkgreen\",\n                    \"Good (5-10 km)\" = \"yellow\",\n                    \"Moderate (2-5 km)\" = \"orange\",\n                    \"Low (1-2 km)\" = \"red\",\n                    \"Fog/Haze (&lt;1 km)\" = \"purple\"\n               )\n          ) +  # Manual color scale for visibility categories\n          labs(\n               title = \"Visibility Category Map\",\n               x = \"Date\",\n               y = \"Time of Day\",\n               fill = \"Visibility Level\"\n          ) +  # Labels for the plot\n          scale_y_datetime(\n               date_labels = \"%H:%M\",\n               date_breaks = \"2 hours\",\n               sec.axis = dup_axis(name = \"\")\n          ) +  # Format y-axis for time\n          facet_grid(~ month_day, scales = \"free\") +\n          ggplot_theming(legend.position = \"right\")  # Apply custom theme\n     \n     # Save the plot as a PNG file\n     base_path &lt;- \"data/plots/\"\n     plot_path &lt;- paste0(base_path, \"ggVisibilityCat.png\")\n     ggsave(plot_path, plot = rPlot, scale = 1.5)\n     \n     # Read the PNG file and display it\n     img &lt;- readPNG(plot_path)\n     grid::grid.raster(img)\n}\n\n# Weather Codes ----\nplot_weather_codes &lt;- function(con) {\n     # Query to fetch weather codes and descriptions\n     query &lt;- \"\n    SELECT\n      fd.weather_code,\n      wc.Description AS description,\n      fd.time_only,\n      fd.month_day\n    FROM\n      forecast_data fd\n    LEFT JOIN WeatherCodeDictionary wc ON wc.Code == fd.weather_code;\n  \"\n     \n     data &lt;- execute_query(con, query)  # Execute the query and get the data\n     \n     # Convert time_only to POSIXct for plotting\n     data$time_only &lt;- as.POSIXct(data$time_only, format = \"%H:%M:%S\")\n     \n     # Create a ggplot object for weather codes\n     rPlot &lt;- ggplot(\n          data, aes(x = month_day, y = time_only, fill = description)) +\n          geom_tile(alpha = 0.5) +  # Tile plot for weather codes\n          scale_fill_paletteer_d(\"khroma::land\") +  # Color scale for weather codes\n          scale_y_datetime(\n               date_labels = \"%H:%M\",\n               date_breaks = \"2 hours\",\n               sec.axis = dup_axis(name = \"\")\n          ) +  # Format y-axis for time\n          labs(\n               title = \"Weather Code Map\",\n               x = \"Day\",\n               y = \"Time of Day\",\n               fill = \"Weather Code\"\n          ) +  # Labels for the plot\n          facet_grid(~ month_day, scales = \"free\") +\n          ggplot_theming(legend.position = \"right\")  # Apply custom theme\n     \n     # Save the plot as a PNG file\n     base_path &lt;- \"data/plots/\"\n     plot_path &lt;- paste0(base_path, \"ggWeatherCodes.png\")\n     ggsave(plot_path, plot = rPlot, scale = 1.5)\n     \n     # Read the PNG file and display it\n     img &lt;- readPNG(plot_path)\n     grid::grid.raster(img)\n}\n\ndisplay_a_plot &lt;- function(plot_path) {\n     # Read the PNG file and display it\n     img &lt;- readPNG(plot_path)\n     grid::grid.raster(img)     \n}"
  },
  {
    "objectID": "index.html#weather-data-api",
    "href": "index.html#weather-data-api",
    "title": "Weather Assistant",
    "section": "Weather Data API",
    "text": "Weather Data API\n(“🌤️ Free Open-Source Weather API  Open-Meteo.com” n.d.)\n\n“🌤️ Free Open-Source Weather API  Open-Meteo.com.” n.d. Accessed February 8, 2025. https://open-meteo.com/.\n24-Hour Forecast\n\n\nRun the API script to import the dataset.import polars as pl  # For data manipulation and DataFrame creation\nimport pandas as pd  # For generating the date range\nimport requests_cache  # For caching API requests to reduce load and improve performance\nfrom retry_requests import retry  # For retrying failed API requests\nimport openmeteo_requests  # For interacting with the Open-Meteo API\nfrom datetime import datetime, timezone  # For handling date and time\n\ndef import_api_hourly(latitude: float, longitude: float) -&gt; pl.DataFrame:\n    \"\"\"\n    Fetches hourly weather data from the Open-Meteo API for the given latitude and longitude.\n\n    Parameters:\n        latitude (float): The latitude of the location for which weather data is requested.\n        longitude (float): The longitude of the location for which weather data is requested.\n\n    Returns:\n        pl.DataFrame: A Polars DataFrame containing hourly weather data for the specified location.\n    \"\"\"\n    \n    # Setup the Open-Meteo API client with cache and retry on error\n    # Caching reduces the number of API calls by storing responses for 1 hour (3600 seconds)\n    cache_session = requests_cache.CachedSession('.cache', expire_after = 3600)\n    \n    # Retry mechanism: retry up to 5 times with exponential backoff if the request fails\n    retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)\n    \n    # Initialize the Open-Meteo API client with the cached and retry-enabled session\n    openmeteo = openmeteo_requests.Client(session = retry_session)\n    \n    # Define the API endpoint and parameters for the weather data request\n    url = \"https://api.open-meteo.com/v1/forecast\"\n    params = {\n        \"latitude\": latitude,  # Latitude of the location\n        \"longitude\": longitude,  # Longitude of the location\n        \"hourly\": [  # List of hourly weather variables to fetch\n            \"temperature_2m\",  # Temperature at 2 meters above ground\n            \"precipitation_probability\",  # Probability of precipitation\n            \"precipitation\",  # Total precipitation\n            \"rain\",  # Rain amount\n            \"showers\",  # Showers amount\n            \"snowfall\",  # Snowfall amount\n            \"snow_depth\",  # Snow depth\n            \"weather_code\",  # Weather condition code\n            \"visibility\",  # Visibility\n            \"wind_speed_10m\",  # Wind speed at 10 meters above ground\n            \"wind_direction_10m\"  # Wind direction at 10 meters above ground\n        ],\n        \"temperature_unit\": \"fahrenheit\",  # Temperature unit (Fahrenheit)\n        \"wind_speed_unit\": \"mph\",  # Wind speed unit (miles per hour)\n        \"precipitation_unit\": \"inch\",  # Precipitation unit (inches)\n        \"timezone\": \"America/Chicago\",  # Timezone for the data\n        \"forecast_days\": 1,  # Number of forecast days (1 day)\n        \"past_hours\": 6,  # Include past 6 hours of data\n        \"forecast_hours\": 24,  # Include next 24 hours of forecast\n        \"models\": \"best_match\"  # Use the best matching weather model\n    }\n    \n    # Make the API request to fetch weather data\n    responses = openmeteo.weather_api(url, params = params)\n    \n    # Process the first location in the response (only one location is requested)\n    response = responses[0]\n    \n    # Print location and timezone information for debugging\n    print(f\"Coordinates {response.Latitude()}°N {response.Longitude()}°E\")\n    print(f\"Elevation {response.Elevation()} m asl\")\n    print(f\"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}\")\n    print(f\"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s\")\n    \n    # Process hourly data from the API response\n    hourly = response.Hourly()\n    \n    # Extract each hourly weather variable from the response\n    hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()  # Temperature at 2m\n    hourly_precipitation_probability = hourly.Variables(1).ValuesAsNumpy()  # Precipitation probability\n    hourly_precipitation = hourly.Variables(2).ValuesAsNumpy()  # Total precipitation\n    hourly_rain = hourly.Variables(3).ValuesAsNumpy()  # Rain amount\n    hourly_showers = hourly.Variables(4).ValuesAsNumpy()  # Showers amount\n    hourly_snowfall = hourly.Variables(5).ValuesAsNumpy()  # Snowfall amount\n    hourly_snow_depth = hourly.Variables(6).ValuesAsNumpy()  # Snow depth\n    hourly_weather_code = hourly.Variables(7).ValuesAsNumpy()  # Weather condition code\n    hourly_visibility = hourly.Variables(8).ValuesAsNumpy()  # Visibility\n    hourly_wind_speed_10m = hourly.Variables(9).ValuesAsNumpy()  # Wind speed at 10m\n    hourly_wind_direction_10m = hourly.Variables(10).ValuesAsNumpy()  # Wind direction at 10m\n    \n    # Create a time range for the hourly data using Pandas (supports hourly intervals)\n    start_time = datetime.fromtimestamp(hourly.Time(), tz = timezone.utc)  # Start time of the data\n    end_time = datetime.fromtimestamp(hourly.TimeEnd(), tz = timezone.utc)  # End time of the data\n    interval = pd.Timedelta(seconds=hourly.Interval())  # Time interval between data points\n    \n    # Generate the date range using Pandas\n    date_range = pd.date_range(\n        start = start_time,\n        end = end_time - interval,  # Subtract interval to match the API's inclusive=\"left\" behavior\n        freq = interval\n    )\n    \n    # Create a dictionary to store the hourly weather data\n    hourly_data = {\n        \"date\": date_range,\n        \"temperature_2m\": hourly_temperature_2m,\n        \"precipitation_probability\": hourly_precipitation_probability,\n        \"precipitation\": hourly_precipitation,\n        \"rain\": hourly_rain,\n        \"showers\": hourly_showers,\n        \"snowfall\": hourly_snowfall,\n        \"snow_depth\": hourly_snow_depth,\n        \"weather_code\": hourly_weather_code,\n        \"visibility\": hourly_visibility,\n        \"wind_speed_10m\": hourly_wind_speed_10m,\n        \"wind_direction_10m\": hourly_wind_direction_10m\n    }\n    \n    # Convert the dictionary to a Polars DataFrame and return it\n    return pl.DataFrame(hourly_data)\n\n\n\n\n\nWrite hourly api results.dbWriteTable(\nduckdb_con, \n\"forecast_data\", \ndata.frame(py$import_api_hourly(38.748, -90.439)),\noverwrite = TRUE\n)\n\nCoordinates 38.74498748779297°N -90.4433364868164°E\nElevation 175.0 m asl\nTimezone b'America/Chicago' b'GMT-5'\nTimezone difference to GMT+0 -18000 s\n\n\n\nHistorical Weather (1974-2024)\n\n\nRun the API script to import the dataset.import openmeteo_requests\nimport requests_cache\nimport pandas as pd\nimport polars as pl\nfrom retry_requests import retry\n\ndef import_api_hourly_historical(latitude: float, longitude: float) -&gt; pl.DataFrame:\n     # Setup the Open-Meteo API client with cache and retry on error\n     cache_session = requests_cache.CachedSession('.cache', expire_after = -1)\n     retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)\n     openmeteo = openmeteo_requests.Client(session = retry_session)\n     \n     # Make sure all required weather variables are listed here\n     # The order of variables in hourly or daily is important to assign them correctly below\n     url = \"https://archive-api.open-meteo.com/v1/archive\"\n     params = {\n        \"latitude\": 38.748,\n        \"longitude\": -90.439,\n        \"start_date\": \"1974-01-01\",\n        \"end_date\": \"2024-12-31\",\n        \"hourly\": [\n             \"temperature_2m\", \n             \"precipitation\", \n             \"rain\", \n             \"snowfall\", \n             \"snow_depth\", \n             \"visibility\",\n             \"weather_code\", \n             \"wind_speed_10m\", \n             \"wind_direction_10m\"],\n        \"temperature_unit\": \"fahrenheit\",\n        \"wind_speed_unit\": \"mph\",\n        \"precipitation_unit\": \"inch\",\n        \"timezone\": \"America/Chicago\",\n        \"models\": \"best_match\"\n     }\n     \n     responses = openmeteo.weather_api(url, params = params)\n     \n     # Process first location. Add a for-loop for multiple locations or weather models\n     response = responses[0]\n     print(f\"Coordinates {response.Latitude()}°N {response.Longitude()}°E\")\n     print(f\"Elevation {response.Elevation()} m asl\")\n     print(f\"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}\")\n     print(f\"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s\")\n     \n     # Process hourly data. The order of variables needs to be the same as requested.\n     hourly = response.Hourly()\n     hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()\n     hourly_precipitation = hourly.Variables(1).ValuesAsNumpy()\n     hourly_rain = hourly.Variables(2).ValuesAsNumpy()\n     hourly_snowfall = hourly.Variables(3).ValuesAsNumpy()\n     hourly_snow_depth = hourly.Variables(4).ValuesAsNumpy()\n     hourly_visibility = hourly.Variables(5).ValuesAsNumpy()\n     hourly_weather_code = hourly.Variables(6).ValuesAsNumpy()\n     hourly_wind_speed_10m = hourly.Variables(7).ValuesAsNumpy()\n     hourly_wind_direction_10m = hourly.Variables(8).ValuesAsNumpy()\n\n     # Create a time range for the hourly data using Pandas (supports hourly intervals)\n     start_time = datetime.fromtimestamp(hourly.Time(), tz = timezone.utc)  # Start time of the data\n     end_time = datetime.fromtimestamp(hourly.TimeEnd(), tz = timezone.utc)  # End time of the data\n     interval = pd.Timedelta(seconds=hourly.Interval())  # Time interval between data points\n     \n     # Generate the date range using Pandas\n     date_range = pd.date_range(\n          start = start_time,\n          end = end_time - interval,  # Subtract interval to match the API's inclusive=\"left\" behavior\n          freq = interval\n     )\n\n     hourly_data = {\n     \"date\": date_range,\n     \"temperature_2m\": hourly_temperature_2m,\n     \"precipitation\": hourly_precipitation,\n     \"rain\": hourly_rain,\n    # \"showers\": hourly_showers,\n     \"snowfall\": hourly_snowfall,\n     \"snow_depth\": hourly_snow_depth,\n     \"weather_code\": hourly_weather_code,\n     \"visibility\": hourly_visibility,\n     \"wind_speed_10m\": hourly_wind_speed_10m,\n     \"wind_direction_10m\": hourly_wind_direction_10m\n     }\n\n     return pl.DataFrame(hourly_data)\n\n\n\n\n\nWrite hourly api historical data.dbWriteTable(\nduckdb_con, \n\"historical_data\",\ndata.frame(py$import_api_hourly_historical(38.748, -90.439)),\noverwrite = TRUE\n)\n\nCoordinates 38.769771575927734°N -90.49114990234375°E\nElevation 175.0 m asl\nTimezone b'America/Chicago' b'GMT-6'\nTimezone difference to GMT+0 -21600 s"
  },
  {
    "objectID": "index.html#database-setup",
    "href": "index.html#database-setup",
    "title": "Weather Assistant",
    "section": "Database Setup",
    "text": "Database Setup\nENUM\n\n\nload enum file#' Create ENUM Type and Associate Codes with Descriptions\n#'\n#' This function creates an ENUM type in DuckDB and associates codes with their descriptions.\n#' It can be used to create other ENUM types and associations\n#'\n#' @param duckdb_conn A DuckDB connection object.\n#' @param enum_name A string specifying the name of the ENUM type to be created.\n#' @param table_name A string specifying the name of the ENUM dictionary table.\n#' @param codes A character vector of codes to be included in the ENUM type.\n#' @param descriptions A character vector of descriptions corresponding to the codes.\n#' @example\n#' \\dontrun{\n#' library(DBI)\n#' \n#' codes &lt;- c('0', '1', '2', '3', '45', '48', '51', '53', '55', '56', '57', \n#'            '61', '63', '65', '66', '67', '71', '73', '75', '77', '80', '81', \n#'            '82', '85', '86', '95', '96', '99')\n#' descriptions &lt;- c('Clear sky', 'Mainly clear', 'Partly cloudy', 'Overcast', \n#'                   'Fog', 'Depositing rime fog', 'Drizzle: Light', 'Drizzle: Moderate', \n#'                   'Drizzle: Dense', 'Freezing Drizzle: Light', 'Freezing Drizzle: Dense', \n#'                   'Rain: Slight', 'Rain: Moderate', 'Rain: Heavy', 'Freezing Rain: Light', \n#'                   'Freezing Rain: Heavy', 'Snow fall: Slight', 'Snow fall: Moderate', \n#'                   'Snow fall: Heavy', 'Snow grains', 'Rain showers: Slight', \n#'                   'Rain showers: Moderate', 'Rain showers: Violent', 'Snow showers: Slight', \n#'                   'Snow showers: Heavy', 'Thunderstorm: Slight or moderate', \n#'                   'Thunderstorm with slight hail', 'Thunderstorm with heavy hail')\n#' \n#' result &lt;- create_enum_and_associate(duckdb_con, \"WeatherCode\", codes, descriptions)\n#' print(result)\n#' }\n#' @export\ncreate_enum_and_associate &lt;- function(duckdb_con, enum_name, table_name, codes, descriptions) {\n     \n     # Attempt to drop the ENUM type if it exists\n     drop_query &lt;- paste0(\"DROP TYPE IF EXISTS \", enum_name, \";\")\n     \n     tryCatch({\n          dbExecute(duckdb_con, drop_query)\n          message(paste(\"Dropped existing ENUM type:\", enum_name))\n     }, error = \\(e) {\n          message(paste0(\"No existing ENUM type to drop: \", enum_name))\n     })\n     \n     # Create the ENUM type\n     enum_query &lt;- paste0(\n          \"CREATE TYPE \", enum_name, \" AS ENUM (\",\n          paste0(\n               \"'\", codes, \"'\", collapse = \", \"), \");\"\n          )\n     \n     dbExecute(duckdb_con, enum_query)\n     message(paste0(\"Created ENUM type: \", enum_name))\n     \n     # Write an association table for reference\n     dbWriteTable(\n          duckdb_con,\n          table_name,\n          data.frame(\n               Code = codes,\n               Description = descriptions,\n               stringsAsFactors = TRUE\n          ),\n          overwrite = TRUE\n     )\n}\n\n\n\n\n\nSets the custom data types in the database.codes &lt;- c(\n'0',\n'1',\n'2',\n'3',\n'45',\n'48',\n'51',\n'53',\n'55',\n'56',\n'57',\n'61',\n'63',\n'65',\n'66',\n'67',\n'71',\n'73',\n'75',\n'77',\n'80',\n'81',\n'82',\n'85',\n'86',\n'95',\n'96',\n'99'\n)\n\ndescriptions &lt;- c(\n'Clear sky',\n'Mainly clear',\n'Partly cloudy',\n'Overcast',\n'Fog',\n'Depositing rime fog',\n'Drizzle: light',\n'Drizzle: moderate',\n'Drizzle: dense',\n'Freezing drizzle: light',\n'Freezing drizzle: dense',\n'Rain: slight',\n'Rain: moderate',\n'Rain: heavy',\n'Freezing rain: light',\n'Freezing rain: heavy',\n'Snow fall: slight',\n'Snow fall: moderate',\n'Snow fall: heavy',\n'Snow grains',\n'Rain showers: slight',\n'Rain showers: moderate',\n'Rain showers: violent',\n'Snow showers: slight',\n'Snow showers: heavy',\n'Thunderstorm: slight or moderate',\n'Thunderstorm with slight hail',\n'Thunderstorm with heavy hail'\n)\n\ncreate_enum_and_associate(\nduckdb_con, \n\"weather_code_enum\", \n\"WeatherCodeDictionary\", \ncodes, \ndescriptions\n)\n\nDropped existing ENUM type: weather_code_enum\n\n\nCreated ENUM type: weather_code_enum\n\n\n\n\n\ntable setuprTable &lt;- tbl(duckdb_con, \"WeatherCodeDictionary\") |&gt; collect()\n\nlocations_list = colnames(rTable)\n\nnotes_list =  list(\n\"World Meteorlogical Organization (WMO) code.\", \n\"Type of meterological event.\")\n\nfootnotes_df &lt;- tibble(\n  notes = notes_list, \n  locations = locations_list)\n\npal_df &lt;- tibble(\n  cols = locations_list,\n  pals = list(eval_palette(\"basetheme::brutal\", 7, 'd', 1))\n)\n\nrTable &lt;- r_table_theming(\nrTable,\ntitle = \"Weather Code: As Data Type\",\nsubtitle = NULL,\nfootnotes_df,\nsource_note = md(\"**source**: World Meteorlogical Organization\"),\npal_df,\nmultiline_feet = TRUE,\ntable_font_size = pct(85),\ntarget_everything = TRUE,\ncolor_by_columns = \"Code\",\n#row_name_col = \"Model\"\n)\n\n\n\n“WMO CODE TABLE 4677” (2025)\n\n“WMO CODE TABLE 4677.” 2025. https://www.nodc.noaa.gov/archive/arc0021/0002199/1.1/data/0-data/HTML/WMO-CODE/WMO4677.HTM.\n\n\n\n\n\nTable 3: How the WMO codes are associated to weather events.\n\n\n\n\n\n\n\nWeather Code: As Data Type\n    \n\nCode1\n\n      Description2\n\n    \n\n\n\n0\nClear sky\n\n\n1\nMainly clear\n\n\n2\nPartly cloudy\n\n\n3\nOvercast\n\n\n45\nFog\n\n\n48\nDepositing rime fog\n\n\n51\nDrizzle: light\n\n\n53\nDrizzle: moderate\n\n\n55\nDrizzle: dense\n\n\n56\nFreezing drizzle: light\n\n\n57\nFreezing drizzle: dense\n\n\n61\nRain: slight\n\n\n63\nRain: moderate\n\n\n65\nRain: heavy\n\n\n66\nFreezing rain: light\n\n\n67\nFreezing rain: heavy\n\n\n71\nSnow fall: slight\n\n\n73\nSnow fall: moderate\n\n\n75\nSnow fall: heavy\n\n\n77\nSnow grains\n\n\n80\nRain showers: slight\n\n\n81\nRain showers: moderate\n\n\n82\nRain showers: violent\n\n\n85\nSnow showers: slight\n\n\n86\nSnow showers: heavy\n\n\n95\nThunderstorm: slight or moderate\n\n\n96\nThunderstorm with slight hail\n\n\n99\nThunderstorm with heavy hail\n\n\n\nsource: World Meteorlogical Organization\n    \n\n\n\n1 World Meteorlogical Organization (WMO) code.\n    \n\n\n2 Type of meterological event."
  },
  {
    "objectID": "index.html#custom-data-types",
    "href": "index.html#custom-data-types",
    "title": "Weather Assistant",
    "section": "Custom Data Types",
    "text": "Custom Data Types\n\n\nCode-- Create ENUM for wind direction\nCREATE TYPE cardinal_direction_enum AS ENUM (\n  'N', \n  'NE', \n  'E', \n  'SE', \n  'S', \n  'SW', \n  'W', \n  'NW'\n);\n\nCREATE TYPE month_name_enum AS ENUM (\n  'January', \n  'February', \n  'March', \n  'April', \n  'May',\n  'June', \n  'July', \n  'August', \n  'September', \n  'October', \n  'November', \n  'December'\n);\n\nCREATE TYPE month_abb_enum AS ENUM (\n  'Jan', \n  'Feb', \n  'Mar', \n  'Apr', \n  'May',\n  'Jun', \n  'Jul', \n  'Aug', \n  'Sep', \n  'Oct', \n  'Nov', \n  'Dec'\n);\n\nCREATE TYPE weekday_name_enum AS ENUM (\n  'Sunday', \n  'Monday', \n  'Tuesday', \n  'Wednesday', \n  'Thursday', \n  'Friday', \n  'Saturday'\n);\n\nCREATE TYPE weekday_abb_enum AS ENUM (\n  'Sun', \n  'Mon', \n  'Tue', \n  'Wed', \n  'Thu', \n  'Fri', \n  'Sat'\n);\n\nCREATE TYPE visibility_cat_enum AS ENUM (\n  'Clearest (&gt;30 km)', \n  'Excellent (10-30 km)', \n  'Good (5-10 km)', \n  'Moderate (2-5 km)', \n  'Low (1-2 km)', \n  'Fog/Haze (&lt;1 km)'\n  );\n  \nCREATE TYPE speed_bin_enum AS ENUM (\n     '0-2', \n     '2-4', \n     '4-6', \n     '6-8', \n     '8-10', \n     '10+'\n     );"
  },
  {
    "objectID": "index.html#dataset-forecast-24-hour",
    "href": "index.html#dataset-forecast-24-hour",
    "title": "Weather Assistant",
    "section": "Dataset: Forecast, 24-Hour",
    "text": "Dataset: Forecast, 24-Hour\nCTAS (Create Table As Select) Approach\nCreating a view for transformations is generally considered a safer approach and aligns with modern data engineering best practices. Views function as virtual tables that compute results on-the-fly, eliminating the need to store intermediate data and reducing the risk of corrupting the source data. By leveraging views, one can iteratively refine transformations without the need to rewrite tables, allowing for adjustments and improvements to the logic as required. This approach provides flexibility and helps the transformation process to remain adaptable to changing requirements.\nFurthermore, DuckDB optimizes queries against views by pushing down computations, which enhances performance and efficiency. Views also serve as self-documenting transformation pipelines, offering clarity and transparency into the decision logic. This makes it easier for others to understand, maintain, and collaborate on the data workflow. By adopting this method, one works towards ensuring a scalable, efficient, and transparent data processing system, supporting both current and future analytical needs.\n\n\nModular SQL, in-database transformation-- Create or replace the view with modular CTEs and explicit column lists\nCREATE OR REPLACE VIEW transformed_forecast AS\nWITH cleaned_data AS (\n  SELECT\n    date,\n    ROUND(temperature_2m::FLOAT, 1) AS temperature_2m,\n    precipitation_probability,\n    ROUND(precipitation::FLOAT, 3) AS precipitation,\n    ROUND(rain::FLOAT, 3) AS rain,\n    ROUND(showers::FLOAT, 3) AS showers,\n    ROUND(snowfall::FLOAT, 3) AS snowfall,\n    ROUND(snow_depth::FLOAT, 3) AS snow_depth,\n    weather_code::INTEGER::TEXT::weather_code_enum AS weather_code,\n    ROUND(visibility::FLOAT, 1) AS visibility,\n    ROUND(wind_speed_10m::FLOAT, 2) AS wind_speed_10m,\n    wind_direction_10m\n  FROM forecast_data\n),\n\ntransformed_data AS (\n  SELECT\n    *,\n    -- Speed bin\n    CASE \n      WHEN wind_speed_10m &lt;= 2 THEN CAST('0-2' AS speed_bin_enum)\n      WHEN wind_speed_10m &lt;= 4 THEN CAST('2-4' AS speed_bin_enum)\n      WHEN wind_speed_10m &lt;= 6 THEN CAST('4-6' AS speed_bin_enum)\n      WHEN wind_speed_10m &lt;= 8 THEN CAST('6-8' AS speed_bin_enum)\n      WHEN wind_speed_10m &lt;= 10 THEN CAST('8-10' AS speed_bin_enum)\n      ELSE CAST('10+' AS speed_bin_enum)\n    END AS speed_bin,\n    -- Cardinal direction\n    CASE \n      WHEN wind_direction_10m BETWEEN 0 AND 22.5 THEN CAST('N' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 22.5 AND 67.5 THEN CAST('NE' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 67.5 AND 112.5 THEN CAST('E' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 112.5 AND 157.5 THEN CAST('SE' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 157.5 AND 202.5 THEN CAST('S' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 202.5 AND 247.5 THEN CAST('SW' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 247.5 AND 292.5 THEN CAST('W' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 292.5 AND 337.5 THEN CAST('NW' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 337.5 AND 360 THEN CAST('N' AS cardinal_direction_enum)\n      ELSE NULL\n    END AS wind_direction_cardinal,\n    -- 15-degree direction bin (numeric)\n    FLOOR((wind_direction_10m - 1e-9) / 15) * 15 AS direction_bin\n  FROM cleaned_data\n),\n\nfinal_data AS (\n  SELECT\n    *,\n    -- Direction angle\n    CASE\n      WHEN wind_direction_cardinal = 'N' THEN 0\n      WHEN wind_direction_cardinal = 'NE' THEN 45\n      WHEN wind_direction_cardinal = 'E' THEN 90\n      WHEN wind_direction_cardinal = 'SE' THEN 135\n      WHEN wind_direction_cardinal = 'S' THEN 180\n      WHEN wind_direction_cardinal = 'SW' THEN 225\n      WHEN wind_direction_cardinal = 'W' THEN 270\n      WHEN wind_direction_cardinal = 'NW' THEN 315\n      ELSE NULL\n    END AS direction_angle,\n    -- Visibility category\n    CASE\n      WHEN visibility &gt; 30000 THEN CAST('Clearest (&gt;30 km)' AS visibility_cat_enum)\n      WHEN visibility &gt; 10000 THEN CAST('Excellent (10-30 km)' AS visibility_cat_enum)\n      WHEN visibility &gt; 5000 THEN CAST('Good (5-10 km)' AS visibility_cat_enum)\n      WHEN visibility &gt; 2000 THEN CAST('Moderate (2-5 km)' AS visibility_cat_enum)\n      WHEN visibility &gt; 1000 THEN CAST('Low (1-2 km)' AS visibility_cat_enum)\n      WHEN visibility &lt;= 1000 THEN CAST('Fog/Haze (&lt;1 km)' AS visibility_cat_enum)\n      ELSE NULL\n    END AS visibility_category,\n    -- Date parts\n    EXTRACT(YEAR FROM date) AS year,\n    EXTRACT(MONTH FROM date) AS month,\n    monthname(date)::month_name_enum AS month_name,\n    strftime(date, '%b')::month_abb_enum AS month_abb,\n    EXTRACT(DAY FROM date) AS day,\n    dayname(date)::weekday_name_enum AS weekday_name,\n    strftime(date, '%a')::weekday_abb_enum AS weekday_abb,\n    strftime(date, '%b %d') AS month_day,\n    strftime(date, '%H:%M:%S') AS time_only,\n    strptime('1970-01-01 ' || strftime(date, '%H:%M:%S'), '%Y-%m-%d %H:%M:%S') AS common_date\n  FROM transformed_data\n)\n\n-- Final output\nSELECT * FROM final_data;\n\n\n\n\n\nCode-- Final output\nSELECT * FROM transformed_forecast;\n\n\n\n\n\ntable setupr_df &lt;- viewOfForecast |&gt;\ndplyr::mutate(\n     date = as.character(date),\n     common_date = as.character(common_date)\n)\n\nlocations_list = colnames(r_df)\n\nnotes_list &lt;-c(\n  \"Date of the recorded data.\",\n  \"Temperature at 2 meters above ground.\",\n  \"Probability of precipitation.\",\n  \"Amount of precipitation.\",\n  \"Amount of rain.\",\n  \"Amount of showers.\",\n  \"Amount of snowfall.\",\n  \"Depth of snow.\",\n  \"Code representing the weather condition.\",\n  \"Visibility distance.\",\n  \"Wind speed at 10 meters above ground.\",\n  \"Wind direction at 10 meters above ground.\",\n  \"Binned categories for wind speed.\",\n  \"Cardinal direction of the wind.\",\n  \"Binned categories for wind direction.\",\n  \"Numeric angle representing wind direction.\",\n  \"Categorized visibility levels.\",\n  \"Year extracted from the date.\",\n  \"Month extracted from the date.\",\n  \"Name of the month.\",\n  \"Abbreviated name of the month.\",\n  \"Day extracted from the date.\",\n  \"Name of the weekday.\",\n  \"Abbreviated name of the weekday.\",\n  \"Combined month and day.\",\n  \"Time extracted from the date.\",\n  \"Common date format for time-based analysis.\"\n)\n\nfootnotes_df &lt;- tibble(\n  notes = notes_list, \n  locations = locations_list\n)\n\npal_df &lt;- tibble(\n  cols = locations_list,\n  pals = list(eval_palette(\"grDevices::Rocket\", 10 , 'c', 1))\n)\n\nrTable &lt;- r_table_theming(\nr_df,\ntitle = \"Forecast Data Preview\",\nsubtitle = NULL,\nfootnotes_df,\nsource_note = md(\"**source**: \"),\npal_df,\nfootnotes_multiline = FALSE,\ntable_font_size = pct(70),\n#do_col_labels = TRUE,\n)\n\n\n\n\n\n\n\n\n\nTable 4\n\n\n\n\n\n\n\nForecast Data Preview\n    \n\ndate1\n\n      temperature_2m2\n\n      precipitation_probability3\n\n      precipitation4\n\n      rain5\n\n      showers6\n\n      snowfall7\n\n      snow_depth8\n\n      weather_code9\n\n      visibility10\n\n      wind_speed_10m11\n\n      wind_direction_10m12\n\n      speed_bin13\n\n      wind_direction_cardinal14\n\n      direction_bin15\n\n      direction_angle16\n\n      visibility_category17\n\n      year18\n\n      month19\n\n      month_name20\n\n      month_abb21\n\n      day22\n\n      weekday_name23\n\n      weekday_abb24\n\n      month_day25\n\n      time_only26\n\n      common_date27\n\n    \n\n\n\n2025-03-11 15:00:00\n61.9\n0\n0\n0\n0\n0\n0\n0\n164698.2\n9.52\n240.422256\n8-10\nSW\n240\n225\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n11\nTuesday\nTue\nMar 11\n15:00:00\n1970-01-01 15:00:00\n\n\n2025-03-11 16:00:00\n66.0\n0\n0\n0\n0\n0\n0\n0\n172572.2\n8.83\n261.253906\n8-10\nW\n255\n270\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n11\nTuesday\nTue\nMar 11\n16:00:00\n1970-01-01 16:00:00\n\n\n2025-03-11 17:00:00\n69.3\n0\n0\n0\n0\n0\n0\n0\n180446.2\n3.80\n270.000000\n2-4\nW\n255\n270\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n11\nTuesday\nTue\nMar 11\n17:00:00\n1970-01-01 17:00:00\n\n\n2025-03-11 18:00:00\n71.6\n0\n0\n0\n0\n0\n0\n0\n185039.4\n2.20\n293.962494\n2-4\nNW\n285\n315\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n11\nTuesday\nTue\nMar 11\n18:00:00\n1970-01-01 18:00:00\n\n\n2025-03-11 19:00:00\n73.2\n0\n0\n0\n0\n0\n0\n0\n182086.6\n1.20\n291.801483\n0-2\nW\n285\n270\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n11\nTuesday\nTue\nMar 11\n19:00:00\n1970-01-01 19:00:00\n\n\n2025-03-11 20:00:00\n74.2\n0\n0\n0\n0\n0\n0\n0\n214238.8\n3.61\n209.744797\n2-4\nSW\n195\n225\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n11\nTuesday\nTue\nMar 11\n20:00:00\n1970-01-01 20:00:00\n\n\n2025-03-11 21:00:00\n76.0\n0\n0\n0\n0\n0\n0\n0\n232283.5\n6.14\n213.111359\n6-8\nSW\n210\n225\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n11\nTuesday\nTue\nMar 11\n21:00:00\n1970-01-01 21:00:00\n\n\n2025-03-11 22:00:00\n77.0\n0\n0\n0\n0\n0\n0\n0\n246391.1\n5.80\n242.447266\n4-6\nSW\n240\n225\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n11\nTuesday\nTue\nMar 11\n22:00:00\n1970-01-01 22:00:00\n\n\n2025-03-11 23:00:00\n75.7\n0\n0\n0\n0\n0\n0\n0\n236220.5\n4.41\n300.465454\n4-6\nNW\n300\n315\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n11\nTuesday\nTue\nMar 11\n23:00:00\n1970-01-01 23:00:00\n\n\n2025-03-12\n69.7\n0\n0\n0\n0\n0\n0\n0\n217519.7\n4.26\n3.012733\n4-6\nN\n0\n0\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n00:00:00\n1970-01-01\n\n\n2025-03-12 01:00:00\n65.1\n0\n0\n0\n0\n0\n0\n0\n191273.0\n6.04\n38.990997\n6-8\nNE\n30\n45\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n01:00:00\n1970-01-01 01:00:00\n\n\n2025-03-12 02:00:00\n62.2\n0\n0\n0\n0\n0\n0\n0\n172572.2\n6.61\n66.037514\n6-8\nNE\n60\n45\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n02:00:00\n1970-01-01 02:00:00\n\n\n2025-03-12 03:00:00\n60.4\n0\n0\n0\n0\n0\n0\n0\n155839.9\n6.73\n86.186005\n6-8\nE\n75\n90\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n03:00:00\n1970-01-01 03:00:00\n\n\n2025-03-12 04:00:00\n57.4\n0\n0\n0\n0\n0\n0\n0\n132217.8\n5.11\n28.810698\n4-6\nNE\n15\n45\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n04:00:00\n1970-01-01 04:00:00\n\n\n2025-03-12 05:00:00\n54.5\n0\n0\n0\n0\n0\n0\n0\n110564.3\n7.84\n356.729584\n6-8\nN\n345\n0\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n05:00:00\n1970-01-01 05:00:00\n\n\n2025-03-12 06:00:00\n52.1\n0\n0\n0\n0\n0\n0\n0\n93503.9\n5.39\n41.633450\n4-6\nNE\n30\n45\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n06:00:00\n1970-01-01 06:00:00\n\n\n2025-03-12 07:00:00\n49.9\n0\n0\n0\n0\n0\n0\n0\n88582.7\n3.42\n281.309906\n2-4\nW\n270\n270\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n07:00:00\n1970-01-01 07:00:00\n\n\n2025-03-12 08:00:00\n48.4\n0\n0\n0\n0\n0\n0\n0\n88254.6\n2.24\n323.130005\n2-4\nNW\n315\n315\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n08:00:00\n1970-01-01 08:00:00\n\n\n2025-03-12 09:00:00\n47.2\n0\n0\n0\n0\n0\n0\n1\n86286.1\n1.58\n44.999897\n0-2\nNE\n30\n45\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n09:00:00\n1970-01-01 09:00:00\n\n\n2025-03-12 10:00:00\n46.1\n0\n0\n0\n0\n0\n0\n0\n80380.6\n0.81\n123.690094\n0-2\nSE\n120\n135\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n10:00:00\n1970-01-01 10:00:00\n\n\n2025-03-12 11:00:00\n45.3\n0\n0\n0\n0\n0\n0\n0\n74475.1\n3.61\n158.198532\n2-4\nS\n150\n180\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n11:00:00\n1970-01-01 11:00:00\n\n\n2025-03-12 12:00:00\n46.5\n0\n0\n0\n0\n0\n0\n3\n78740.2\n6.30\n186.115402\n6-8\nS\n180\n180\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n12:00:00\n1970-01-01 12:00:00\n\n\n2025-03-12 13:00:00\n46.5\n0\n0\n0\n0\n0\n0\n3\n75459.3\n2.30\n240.945480\n2-4\nSW\n240\n225\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n13:00:00\n1970-01-01 13:00:00\n\n\n2025-03-12 14:00:00\n52.5\n0\n0\n0\n0\n0\n0\n3\n95800.5\n5.45\n199.179108\n4-6\nS\n195\n180\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n14:00:00\n1970-01-01 14:00:00\n\n\n2025-03-12 15:00:00\n59.2\n0\n0\n0\n0\n0\n0\n3\n121391.1\n6.50\n220.814987\n6-8\nSW\n210\n225\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n15:00:00\n1970-01-01 15:00:00\n\n\n2025-03-12 16:00:00\n64.8\n0\n0\n0\n0\n0\n0\n3\n151902.9\n4.61\n230.906143\n4-6\nSW\n225\n225\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n16:00:00\n1970-01-01 16:00:00\n\n\n2025-03-12 17:00:00\n69.5\n0\n0\n0\n0\n0\n0\n3\n176509.2\n3.69\n255.963730\n2-4\nW\n255\n270\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n17:00:00\n1970-01-01 17:00:00\n\n\n2025-03-12 18:00:00\n73.0\n0\n0\n0\n0\n0\n0\n0\n192585.3\n3.04\n233.972534\n2-4\nSW\n225\n225\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n18:00:00\n1970-01-01 18:00:00\n\n\n2025-03-12 19:00:00\n76.0\n0\n0\n0\n0\n0\n0\n0\n203412.1\n2.98\n167.005386\n2-4\nS\n165\n180\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n19:00:00\n1970-01-01 19:00:00\n\n\n2025-03-12 20:00:00\n78.1\n0\n0\n0\n0\n0\n0\n0\n228346.5\n6.00\n153.435013\n4-6\nSE\n150\n135\nClearest (&gt;30 km)\n2025\n3\nMarch\nMar\n12\nWednesday\nWed\nMar 12\n20:00:00\n1970-01-01 20:00:00\n\n\n\nsource:\n    \n\n\n        \n1 Date of the recorded data., 2 Temperature at 2 meters above ground., 3 Probability of precipitation., 4 Amount of precipitation., 5 Amount of rain., 6 Amount of showers., 7 Amount of snowfall., 8 Depth of snow., 9 Code representing the weather condition., 10 Visibility distance., 11 Wind speed at 10 meters above ground., 12 Wind direction at 10 meters above ground., 13 Binned categories for wind speed., 14 Cardinal direction of the wind., 15 Binned categories for wind direction., 16 Numeric angle representing wind direction., 17 Categorized visibility levels., 18 Year extracted from the date., 19 Month extracted from the date., 20 Name of the month., 21 Abbreviated name of the month., 22 Day extracted from the date., 23 Name of the weekday., 24 Abbreviated name of the weekday., 25 Combined month and day., 26 Time extracted from the date., 27 Common date format for time-based analysis.\n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\nCode-- Replace the historical weather table\nCREATE OR REPLACE TABLE forecast_data AS\nSELECT * FROM transformed_forecast;\n\n-- Preview results \nSELECT * FROM forecast_data LIMIT 10;\n\n\n\n\n\nCodeDROP VIEW transformed_forecast;\n\n\n\nRefresh database statistics for the query planner:\n\n\nCodeANALYZE forecast_data;"
  },
  {
    "objectID": "index.html#dataset-historical-1974-2024",
    "href": "index.html#dataset-historical-1974-2024",
    "title": "Weather Assistant",
    "section": "Dataset: Historical, 1974-2024",
    "text": "Dataset: Historical, 1974-2024\nCTAS Approach\n\n\nModular SQL, in-database transformation-- Create or replace the view with modular CTEs and explicit column lists\nCREATE OR REPLACE VIEW transformed_historical AS\nWITH cleaned_data AS (\n  SELECT\n    date,\n    ROUND(temperature_2m::FLOAT, 1) AS temperature_2m,\n    ROUND(precipitation::FLOAT, 3) AS precipitation,\n    ROUND(rain::FLOAT, 3) AS rain,\n    ROUND(snowfall::FLOAT, 3) AS snowfall,\n    ROUND(snow_depth::FLOAT, 3) AS snow_depth,\n    weather_code::INTEGER::TEXT::weather_code_enum AS weather_code,\n    ROUND(wind_speed_10m::FLOAT, 2) AS wind_speed_10m,\n    wind_direction_10m\n  FROM historical_data\n),\n\ntransformed_data AS (\n  SELECT\n    *,\n    -- Speed bin\n    CASE \n      WHEN wind_speed_10m &lt;= 2 THEN CAST('0-2' AS speed_bin_enum)\n      WHEN wind_speed_10m &lt;= 4 THEN CAST('2-4' AS speed_bin_enum)\n      WHEN wind_speed_10m &lt;= 6 THEN CAST('4-6' AS speed_bin_enum)\n      WHEN wind_speed_10m &lt;= 8 THEN CAST('6-8' AS speed_bin_enum)\n      WHEN wind_speed_10m &lt;= 10 THEN CAST('8-10' AS speed_bin_enum)\n      ELSE CAST('10+' AS speed_bin_enum)\n    END AS speed_bin,\n    -- Cardinal direction\n    CASE \n      WHEN wind_direction_10m BETWEEN 0 AND 22.5 THEN CAST('N' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 22.5 AND 67.5 THEN CAST('NE' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 67.5 AND 112.5 THEN CAST('E' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 112.5 AND 157.5 THEN CAST('SE' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 157.5 AND 202.5 THEN CAST('S' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 202.5 AND 247.5 THEN CAST('SW' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 247.5 AND 292.5 THEN CAST('W' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 292.5 AND 337.5 THEN CAST('NW' AS cardinal_direction_enum)\n      WHEN wind_direction_10m BETWEEN 337.5 AND 360 THEN CAST('N' AS cardinal_direction_enum)\n      ELSE NULL\n    END AS wind_direction_cardinal,\n    -- 15-degree direction bin (numeric)\n    FLOOR((wind_direction_10m - 1e-9) / 15) * 15 AS direction_bin\n  FROM cleaned_data\n),\n\nfinal_data AS (\n  SELECT\n    *,\n    -- Direction angle\n    CASE\n      WHEN wind_direction_cardinal = 'N' THEN 0\n      WHEN wind_direction_cardinal = 'NE' THEN 45\n      WHEN wind_direction_cardinal = 'E' THEN 90\n      WHEN wind_direction_cardinal = 'SE' THEN 135\n      WHEN wind_direction_cardinal = 'S' THEN 180\n      WHEN wind_direction_cardinal = 'SW' THEN 225\n      WHEN wind_direction_cardinal = 'W' THEN 270\n      WHEN wind_direction_cardinal = 'NW' THEN 315\n      ELSE NULL\n    END AS direction_angle,\n    -- Date parts\n    EXTRACT(YEAR FROM date) AS year,\n    EXTRACT(MONTH FROM date) AS month,\n    monthname(date)::month_name_enum AS month_name,\n    strftime(date, '%b')::month_abb_enum AS month_abb,\n    EXTRACT(DAY FROM date) AS day,\n    dayname(date)::weekday_name_enum AS weekday_name,\n    strftime(date, '%a')::weekday_abb_enum AS weekday_abb,\n    strftime(date, '%b %d') AS month_day,\n    strftime(date, '%H:%M:%S') AS time_only,\n    strptime('1970-01-01 ' || strftime(date, '%H:%M:%S'), '%Y-%m-%d %H:%M:%S') AS common_date\n  FROM transformed_data\n)\n\n-- Final output\nSELECT * FROM final_data;\n\n\n\n\n\nCode-- Final output\nSELECT * FROM transformed_historical LIMIT 20;\n\n\n\n\n\ntable setupr_df &lt;- viewOfHistorical |&gt;\ndplyr::mutate(\n     date = as.character(date),\n     common_date = as.character(common_date)\n)\n\nlocations_list = colnames(r_df)\n\nnotes_list &lt;- c(\n  \"Date of the recorded data.\",\n  \"Temperature at 2 meters above ground.\",\n  \"Amount of precipitation.\",\n  \"Amount of rain.\",\n  \"Amount of snowfall.\",\n  \"Depth of snow.\",\n  \"Code representing the weather condition.\",\n  \"Wind speed at 10 meters above ground.\",\n  \"Wind direction at 10 meters above ground.\",\n  \"Binned categories for wind speed.\",\n  \"Cardinal direction of the wind.\",\n  \"Binned categories for wind direction.\",\n  \"Numeric angle representing wind direction.\",\n  \"Year extracted from the date.\",\n  \"Month extracted from the date.\",\n  \"Name of the month.\",\n  \"Abbreviated name of the month.\",\n  \"Day extracted from the date.\",\n  \"Name of the weekday.\",\n  \"Abbreviated name of the weekday.\",\n  \"Combined month and day.\",\n  \"Time extracted from the date.\",\n  \"Common date format for time-based analysis.\"\n)\n\nfootnotes_df &lt;- tibble(\n  notes = notes_list, \n  locations = locations_list\n)\n\npal_df &lt;- tibble(\n  cols = locations_list,\n  pals = list(eval_palette(\"grDevices::Rocket\", 10 , 'c', 1))\n)\n\nrTable &lt;- r_table_theming(\nr_df,\ntitle = \"Forecast Data Preview\",\nsubtitle = NULL,\nfootnotes_df,\nsource_note = md(\"**source**: \"),\npal_df,\nfootnotes_multiline = FALSE,\ntable_font_size = pct(70),\n#do_col_labels = TRUE,\n)\n\n\n\n\n\n\n\n\n\nTable 5\n\n\n\n\n\n\n\nForecast Data Preview\n    \n\ndate1\n\n      temperature_2m2\n\n      precipitation3\n\n      rain4\n\n      snowfall5\n\n      snow_depth6\n\n      weather_code7\n\n      wind_speed_10m8\n\n      wind_direction_10m9\n\n      speed_bin10\n\n      wind_direction_cardinal11\n\n      direction_bin12\n\n      direction_angle13\n\n      year14\n\n      month15\n\n      month_name16\n\n      month_abb17\n\n      day18\n\n      weekday_name19\n\n      weekday_abb20\n\n      month_day21\n\n      time_only22\n\n      common_date23\n\n    \n\n\n\n1974-01-01 06:00:00\n5.3\n0\n0\n0\n0.394\n2\n8.39\n313.91916\n8-10\nNW\n300\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n06:00:00\n1970-01-01 06:00:00\n\n\n1974-01-01 07:00:00\n6.0\n0\n0\n0\n0.394\n2\n9.33\n314.02905\n8-10\nNW\n300\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n07:00:00\n1970-01-01 07:00:00\n\n\n1974-01-01 08:00:00\n5.0\n0\n0\n0\n0.394\n2\n8.71\n318.12222\n8-10\nNW\n315\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n08:00:00\n1970-01-01 08:00:00\n\n\n1974-01-01 09:00:00\n3.6\n0\n0\n0\n0.394\n1\n7.28\n315.00009\n6-8\nNW\n315\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n09:00:00\n1970-01-01 09:00:00\n\n\n1974-01-01 10:00:00\n2.0\n0\n0\n0\n0.394\n1\n5.56\n310.10083\n4-6\nNW\n300\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n10:00:00\n1970-01-01 10:00:00\n\n\n1974-01-01 11:00:00\n0.0\n0\n0\n0\n0.394\n2\n5.42\n308.29019\n4-6\nNW\n300\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n11:00:00\n1970-01-01 11:00:00\n\n\n1974-01-01 12:00:00\n-1.6\n0\n0\n0\n0.394\n2\n5.24\n309.80551\n4-6\nNW\n300\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n12:00:00\n1970-01-01 12:00:00\n\n\n1974-01-01 13:00:00\n-2.9\n0\n0\n0\n0.394\n0\n4.61\n309.09384\n4-6\nNW\n300\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n13:00:00\n1970-01-01 13:00:00\n\n\n1974-01-01 14:00:00\n-3.8\n0\n0\n0\n0.394\n1\n5.10\n307.87503\n4-6\nNW\n300\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n14:00:00\n1970-01-01 14:00:00\n\n\n1974-01-01 15:00:00\n-2.3\n0\n0\n0\n0.394\n3\n5.54\n316.63654\n4-6\nNW\n315\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n15:00:00\n1970-01-01 15:00:00\n\n\n1974-01-01 16:00:00\n0.5\n0\n0\n0\n0.394\n3\n5.52\n328.24057\n4-6\nNW\n315\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n16:00:00\n1970-01-01 16:00:00\n\n\n1974-01-01 17:00:00\n3.4\n0\n0\n0\n0.394\n2\n4.53\n327.09476\n4-6\nNW\n315\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n17:00:00\n1970-01-01 17:00:00\n\n\n1974-01-01 18:00:00\n6.1\n0\n0\n0\n0.394\n3\n4.16\n323.74606\n4-6\nNW\n315\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n18:00:00\n1970-01-01 18:00:00\n\n\n1974-01-01 19:00:00\n9.3\n0\n0\n0\n0.394\n3\n4.61\n330.94550\n4-6\nNW\n330\n315\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n19:00:00\n1970-01-01 19:00:00\n\n\n1974-01-01 20:00:00\n10.5\n0\n0\n0\n0.394\n3\n4.67\n343.30069\n4-6\nN\n330\n0\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n20:00:00\n1970-01-01 20:00:00\n\n\n1974-01-01 21:00:00\n10.7\n0\n0\n0\n0.361\n3\n4.08\n350.53775\n4-6\nN\n345\n0\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n21:00:00\n1970-01-01 21:00:00\n\n\n1974-01-01 22:00:00\n10.4\n0\n0\n0\n0.361\n3\n3.33\n19.65391\n2-4\nN\n15\n0\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n22:00:00\n1970-01-01 22:00:00\n\n\n1974-01-01 23:00:00\n9.5\n0\n0\n0\n0.361\n3\n2.38\n41.18584\n2-4\nNE\n30\n45\n1974\n1\nJanuary\nJan\n1\nTuesday\nTue\nJan 01\n23:00:00\n1970-01-01 23:00:00\n\n\n1974-01-02\n8.3\n0\n0\n0\n0.361\n3\n3.85\n54.46224\n2-4\nNE\n45\n45\n1974\n1\nJanuary\nJan\n2\nWednesday\nWed\nJan 02\n00:00:00\n1970-01-01\n\n\n1974-01-02 01:00:00\n7.2\n0\n0\n0\n0.361\n3\n4.47\n53.13002\n4-6\nNE\n45\n45\n1974\n1\nJanuary\nJan\n2\nWednesday\nWed\nJan 02\n01:00:00\n1970-01-01 01:00:00\n\n\n\nsource:\n    \n\n\n        \n1 Date of the recorded data., 2 Temperature at 2 meters above ground., 3 Amount of precipitation., 4 Amount of rain., 5 Amount of snowfall., 6 Depth of snow., 7 Code representing the weather condition., 8 Wind speed at 10 meters above ground., 9 Wind direction at 10 meters above ground., 10 Binned categories for wind speed., 11 Cardinal direction of the wind., 12 Binned categories for wind direction., 13 Numeric angle representing wind direction., 14 Year extracted from the date., 15 Month extracted from the date., 16 Name of the month., 17 Abbreviated name of the month., 18 Day extracted from the date., 19 Name of the weekday., 20 Abbreviated name of the weekday., 21 Combined month and day., 22 Time extracted from the date., 23 Common date format for time-based analysis.\n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\nReplace the historical weather tableCREATE OR REPLACE TABLE historical_data AS\nSELECT * FROM transformed_historical;\n\n\n\n\n\nDrop the viewDROP VIEW transformed_historical;\n\n\n\n\n\nRefresh database statistics for the query plannerANALYZE historical_data;\n\n\n\nPlot Testing\n\n\nCreate a plot list for wind rosesbase_path = \"data/plots/\"\n\nplot_wind_rose_ggplot(duckdb_con)\n\nfileList &lt;-list.files(base_path, pattern = \"^wind_rose\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Weather Codes\n\n\n\n\n\n\n\n\n\n\n\n(b) Freezing/Non-Freezing Temperature\n\n\n\n\n\n\n\n\n\n\n\n(c) Visibility (km)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(d) Visibility Categories\n\n\n\n\n\n\n\n\n\n\n\n(e) Precipitation (empty if no precipitation)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(f) Wind Rose1\n\n\n\n\n\n\n\n\n\n\n\n(g) Wind Rose2\n\n\n\n\n\n\n\nFigure 1: These are the grouped figures.\n\n\n\nFigure 1\nFigure 1 (a)\nFigure 1 (b)\nFigure 1 (c)\nFigure 1 (d)\nFigure 1 (e)\nFigure 1 (f)\nFigure 1 (g)\n?@fig-rose3"
  },
  {
    "objectID": "index.html#route-geometry-and-elevation",
    "href": "index.html#route-geometry-and-elevation",
    "title": "Weather Assistant",
    "section": "Route Geometry and Elevation",
    "text": "Route Geometry and Elevation\nMight help with determining fuel cost and time of trip?\n\n\nCreates a linestring object for the map.# R example (osmdata)\nlibrary(osmdata)\nlibrary(osrm)\nlibrary(sf)\nlibrary(FedData)\nlibrary(terra)\nlibrary(leaflet)\n\n# stl regional freightway to walmart distribution center\nroute &lt;- osrmRoute(\nsrc = c(-90.189781, 38.627480), \ndst = c(-91.634422, 38.002338)\n)\n\n# write_sf(route, \"route.geojson\")  # Save for DuckDB?\n\n\n\n\n\nTopological map data is retrieved, creating a SpatRaster object.# Define the bounding box (min_lon, min_lat, max_lon, max_lat)\nbbox &lt;- st_bbox(\nc(\nxmin = -90.189781, \nymin = 38.627480, \nxmax = -91.634422, \nymax = 38.002338), \ncrs = 4326)\n\n# Convert to an sf polygon\nroute_area &lt;- st_as_sfc(bbox)\n\nroute_area &lt;- st_transform(route_area, 4326)\n\ndem &lt;- get_ned(template = route_area, label = \"route_dem\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Geometric route\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Topological plot without route\n\n\n\n\n\n\n\n\n\n\n\n\n(c) Topological plot with route\n\n\n\n\n\n\nFigure 2: Map figures"
  }
]